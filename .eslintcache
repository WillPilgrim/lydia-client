[{"C:\\Code\\lydia-client\\src\\index.js":"1","C:\\Code\\lydia-client\\src\\registerServiceWorker.js":"2","C:\\Code\\lydia-client\\src\\App.js":"3","C:\\Code\\lydia-client\\src\\config.js":"4","C:\\Code\\lydia-client\\src\\Routes.js":"5","C:\\Code\\lydia-client\\src\\libs\\errorLib.js":"6","C:\\Code\\lydia-client\\src\\libs\\contextLib.js":"7","C:\\Code\\lydia-client\\src\\containers\\Home.js":"8","C:\\Code\\lydia-client\\src\\containers\\Signup.js":"9","C:\\Code\\lydia-client\\src\\containers\\Login.js":"10","C:\\Code\\lydia-client\\src\\containers\\NotFound.js":"11","C:\\Code\\lydia-client\\src\\containers\\Settings.js":"12","C:\\Code\\lydia-client\\src\\components\\AuthenticatedRoute.js":"13","C:\\Code\\lydia-client\\src\\components\\UnauthenticatedRoute.js":"14","C:\\Code\\lydia-client\\src\\components\\LoaderButton.js":"15","C:\\Code\\lydia-client\\src\\libs\\hooksLib.js":"16","C:\\Code\\lydia-client\\src\\components\\BillingForm.js":"17","C:\\Code\\lydia-client\\src\\containers\\Account.js":"18","C:\\Code\\lydia-client\\src\\libs\\utilities.js":"19","C:\\Code\\lydia-client\\src\\containers\\ResetPassword.js":"20","C:\\Code\\lydia-client\\src\\containers\\Templates.js":"21","C:\\code\\lydia-client\\src\\index.js":"22","C:\\code\\lydia-client\\src\\App.js":"23","C:\\code\\lydia-client\\src\\registerServiceWorker.js":"24","C:\\code\\lydia-client\\src\\config.js":"25","C:\\code\\lydia-client\\src\\Routes.js":"26","C:\\code\\lydia-client\\src\\libs\\errorLib.js":"27","C:\\code\\lydia-client\\src\\libs\\contextLib.js":"28","C:\\code\\lydia-client\\src\\containers\\NotFound.js":"29","C:\\code\\lydia-client\\src\\containers\\Home.js":"30","C:\\code\\lydia-client\\src\\containers\\Login.js":"31","C:\\code\\lydia-client\\src\\containers\\Settings.js":"32","C:\\code\\lydia-client\\src\\containers\\Signup.js":"33","C:\\code\\lydia-client\\src\\containers\\Account.js":"34","C:\\code\\lydia-client\\src\\containers\\Templates.js":"35","C:\\code\\lydia-client\\src\\containers\\ResetPassword.js":"36","C:\\code\\lydia-client\\src\\components\\UnauthenticatedRoute.js":"37","C:\\code\\lydia-client\\src\\components\\AuthenticatedRoute.js":"38","C:\\code\\lydia-client\\src\\components\\LoaderButton.js":"39","C:\\code\\lydia-client\\src\\libs\\hooksLib.js":"40","C:\\code\\lydia-client\\src\\libs\\utilities.js":"41","C:\\code\\lydia-client\\src\\components\\BillingForm.js":"42","C:\\code\\lydia-client\\src\\containers\\Template.js":"43","C:\\Code\\lydia-client\\src\\containers\\Template.js":"44","C:\\Code\\lydia-client\\src\\containers\\Accounts.js":"45","C:\\Code\\lydia-client\\src\\containers\\Transactions.js":"46","C:\\Code\\lydia-client\\src\\components\\Summary.js":"47","C:\\Code\\lydia-client\\src\\components\\ArchivePopUp.js":"48","C:\\Code\\lydia-client\\src\\components\\InterestPopUp.js":"49","C:\\Code\\lydia-client\\src\\libs\\calculate.js":"50","C:\\Code\\lydia-client\\src\\containers\\ChangePassword.js":"51","C:\\Code\\lydia-client\\src\\containers\\ChangeEmail.js":"52","C:\\Code\\lydia-client\\src\\components\\ConfirmationCode.js":"53","C:\\code\\lydia-client\\src\\containers\\ChangePassword.js":"54","C:\\code\\lydia-client\\src\\containers\\ChangeEmail.js":"55","C:\\code\\lydia-client\\src\\containers\\Accounts.js":"56","C:\\code\\lydia-client\\src\\containers\\Transactions.js":"57","C:\\code\\lydia-client\\src\\components\\Summary.js":"58","C:\\code\\lydia-client\\src\\components\\ArchivePopUp.js":"59","C:\\code\\lydia-client\\src\\components\\ConfirmationCode.js":"60","C:\\code\\lydia-client\\src\\components\\InterestPopUp.js":"61","C:\\code\\lydia-client\\src\\libs\\calculate.js":"62"},{"size":1038,"mtime":1609224210304,"results":"63","hashOfConfig":"64"},{"size":4501,"mtime":1585326586609,"results":"65","hashOfConfig":"64"},{"size":5911,"mtime":1610258945337,"results":"66","hashOfConfig":"64"},{"size":1202,"mtime":1609496827743,"results":"67","hashOfConfig":"64"},{"size":2163,"mtime":1610271548025,"results":"68","hashOfConfig":"64"},{"size":203,"mtime":1609490712345,"results":"69","hashOfConfig":"64"},{"size":159,"mtime":1609490609411,"results":"70","hashOfConfig":"64"},{"size":4436,"mtime":1609497467058,"results":"71","hashOfConfig":"64"},{"size":5024,"mtime":1610511924960,"results":"72","hashOfConfig":"64"},{"size":5587,"mtime":1610527697723,"results":"73","hashOfConfig":"64"},{"size":192,"mtime":1609489988951,"results":"74","hashOfConfig":"64"},{"size":2140,"mtime":1609547019840,"results":"75","hashOfConfig":"64"},{"size":545,"mtime":1609488882329,"results":"76","hashOfConfig":"64"},{"size":890,"mtime":1609489547998,"results":"77","hashOfConfig":"64"},{"size":474,"mtime":1610270869179,"results":"78","hashOfConfig":"64"},{"size":313,"mtime":1609819180129,"results":"79","hashOfConfig":"64"},{"size":2303,"mtime":1609488987923,"results":"80","hashOfConfig":"64"},{"size":15081,"mtime":1610366163379,"results":"81","hashOfConfig":"64"},{"size":1487,"mtime":1610366278404,"results":"82","hashOfConfig":"64"},{"size":4133,"mtime":1610270301504,"results":"83","hashOfConfig":"64"},{"size":7050,"mtime":1610367394748,"results":"84","hashOfConfig":"64"},{"size":1038,"mtime":1609724119811,"results":"85","hashOfConfig":"86"},{"size":5875,"mtime":1610612879326,"results":"87","hashOfConfig":"86"},{"size":4501,"mtime":1561692682965,"results":"88","hashOfConfig":"86"},{"size":1202,"mtime":1609724119779,"results":"89","hashOfConfig":"86"},{"size":2163,"mtime":1610334834326,"results":"90","hashOfConfig":"86"},{"size":203,"mtime":1609724119815,"results":"91","hashOfConfig":"86"},{"size":159,"mtime":1609724119815,"results":"92","hashOfConfig":"86"},{"size":192,"mtime":1609724119796,"results":"93","hashOfConfig":"86"},{"size":4436,"mtime":1609724119789,"results":"94","hashOfConfig":"86"},{"size":3406,"mtime":1610612841533,"results":"95","hashOfConfig":"86"},{"size":2140,"mtime":1609724119800,"results":"96","hashOfConfig":"86"},{"size":3286,"mtime":1610614092647,"results":"97","hashOfConfig":"86"},{"size":15081,"mtime":1610612233040,"results":"98","hashOfConfig":"86"},{"size":7050,"mtime":1610334834358,"results":"99","hashOfConfig":"86"},{"size":4133,"mtime":1610334834353,"results":"100","hashOfConfig":"86"},{"size":890,"mtime":1609724119778,"results":"101","hashOfConfig":"86"},{"size":545,"mtime":1609724119771,"results":"102","hashOfConfig":"86"},{"size":474,"mtime":1609724119777,"results":"103","hashOfConfig":"86"},{"size":313,"mtime":1610346103590,"results":"104","hashOfConfig":"86"},{"size":1487,"mtime":1610612233064,"results":"105","hashOfConfig":"86"},{"size":2303,"mtime":1609724119773,"results":"106","hashOfConfig":"86"},{"size":16132,"mtime":1610612233051,"results":"107","hashOfConfig":"86"},{"size":16132,"mtime":1610364444006,"results":"108","hashOfConfig":"64"},{"size":8447,"mtime":1610432964297,"results":"109","hashOfConfig":"64"},{"size":25450,"mtime":1610446619958,"results":"110","hashOfConfig":"64"},{"size":2617,"mtime":1610262339485,"results":"111","hashOfConfig":"64"},{"size":2731,"mtime":1610181136493,"results":"112","hashOfConfig":"64"},{"size":3806,"mtime":1610522353995,"results":"113","hashOfConfig":"64"},{"size":31231,"mtime":1610366335407,"results":"114","hashOfConfig":"64"},{"size":2421,"mtime":1610273337498,"results":"115","hashOfConfig":"64"},{"size":3025,"mtime":1610273295260,"results":"116","hashOfConfig":"64"},{"size":1158,"mtime":1610526202381,"results":"117","hashOfConfig":"64"},{"size":2421,"mtime":1610334834348,"results":"118","hashOfConfig":"86"},{"size":2310,"mtime":1610614567680,"results":"119","hashOfConfig":"86"},{"size":8447,"mtime":1610612233045,"results":"120","hashOfConfig":"86"},{"size":25450,"mtime":1610612233054,"results":"121","hashOfConfig":"86"},{"size":2617,"mtime":1610334834334,"results":"122","hashOfConfig":"86"},{"size":2731,"mtime":1610334834327,"results":"123","hashOfConfig":"86"},{"size":1158,"mtime":1610612233033,"results":"124","hashOfConfig":"86"},{"size":3806,"mtime":1610612233038,"results":"125","hashOfConfig":"86"},{"size":31231,"mtime":1610612233061,"results":"126","hashOfConfig":"86"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},"qqq7rg",{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"129"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},"gsccot",{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"129"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Code\\lydia-client\\src\\index.js",[],["255","256"],"C:\\Code\\lydia-client\\src\\registerServiceWorker.js",[],"C:\\Code\\lydia-client\\src\\App.js",["257"],"\r\nimport React, { useState, useEffect } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport Navbar from \"react-bootstrap/Navbar\"\r\nimport Nav from \"react-bootstrap/Nav\"\r\nimport Routes from \"./Routes\"\r\nimport { LinkContainer } from \"react-router-bootstrap\"\r\nimport { AppContext } from \"./libs/contextLib\"\r\nimport { onError } from \"./libs/errorLib\"\r\nimport { Auth } from \"aws-amplify\"\r\nimport { API } from \"aws-amplify\"\r\nimport \"./App.css\"\r\n\r\nconst App = () => {\r\n  const history = useHistory()\r\n  const [isAuthenticating, setIsAuthenticating] = useState(true)\r\n  const [isAuthenticated, userHasAuthenticated] = useState(false)\r\n  const [stateToBeRefreshed, setStateToBeRefreshed] = useState(false)\r\n  const [email, setEmail] = useState(\"Settings\")\r\n  const [templates, setTemplates] = useState(null)\r\n  const [accounts, setAccounts] = useState(null)\r\n  const [transAcc, setTransAcc] = useState(null)\r\n  const [currentAccId, setCurrentAccId] = useState(0)\r\n  const [templateFilterModel, setTemplateFilterModel] = useState(null)\r\n  const [templateColumnState, setTemplateColumnState] = useState(null)\r\n  const [saveArchiveRequired, setSaveArchiveRequired] = useState(false)\r\n  const [saveRequired, setSaveRequired] = useState(false)\r\n  const [recalcRequired, setRecalcRequired] = useState(false)\r\n  const [archive, setArchive] = useState(false)\r\n\r\n  useEffect(() => {\r\n    console.log('App: useEffect')\r\n    const onLoad = async () => {\r\n      try {\r\n        let session = await Auth.currentSession()\r\n        userHasAuthenticated(true)\r\n        console.log('Session:')\r\n        console.log(session)\r\n        if (session) {\r\n          console.log('** > Before call to currentUserInfo')\r\n          const { attributes } = await Auth.currentUserInfo()\r\n          console.log('** > After call to currentUserInfo')\r\n          setEmail(attributes.email)\r\n        }\r\n        await refreshAccounts()\r\n        await refreshTemplates()\r\n      }\r\n      catch(e) {\r\n        if (e !== 'No current user') {\r\n          onError(e)\r\n        }\r\n      }\r\n    \r\n      setIsAuthenticating(false)\r\n      setStateToBeRefreshed(false)\r\n    }\r\n    onLoad()\r\n  }, [stateToBeRefreshed])\r\n  \r\n\r\n\r\n  const getAccounts = () => API.get(\"accounts\", \"/accounts\")\r\n\r\n  const getTemplates = () => API.get(\"accounts\", \"/templates\")\r\n\r\n  const refreshTemplates = async () => {\r\n    const currentTemplates = await getTemplates()\r\n    setTemplates( currentTemplates )\r\n  }\r\n\r\n  const refreshAccounts = async () => {\r\n    const accountsFromGet = await getAccounts()\r\n    const mappedAccounts = accountsFromGet.map(acc => {return {hide:false, ...acc}})\r\n    sortAndSetAccounts(mappedAccounts)\r\n  }\r\n\r\n   const sortAndSetAccounts = accs => {\r\n    accs.sort((a, b) => a.sortOrder - b.sortOrder)\r\n    setAccounts(accs)\r\n    const selectedAccount = accs.find(acc => !acc.hide)\r\n    if (selectedAccount) {\r\n     setCurrentAccId(selectedAccount.accountId)\r\n    }\r\n    else setCurrentAccId(0)\r\n  }\r\n\r\n  const changeAccountsOrder = (fromIndex, toIndex, fromSortOrder, toSortOrder) => {\r\n    const localAccounts = accounts\r\n\r\n    localAccounts[fromIndex].sortOrder = toSortOrder\r\n    localAccounts[toIndex].sortOrder = fromSortOrder\r\n    setRecalcRequired(true)\r\n    sortAndSetAccounts(localAccounts)\r\n  }\r\n\r\n  const handleLogout = async () => {\r\n    await Auth.signOut()\r\n\r\n    userHasAuthenticated(false)\r\n\r\n    history.push(\"/login\")\r\n  }\r\n\r\n  const saveAccount= account => API.put(\"accounts\", `/accounts/${account.accountId}`, {body: account})\r\n\r\n  const saveAccountSet = async (fromIndex, toIndex) => {\r\n    for (let i = fromIndex; i <= toIndex; i++)\r\n    {\r\n      await saveAccount(accounts[i])\r\n    }\r\n  }\r\n\r\n  return (\r\n    !isAuthenticating && (\r\n      <div className=\"App container py-3\">\r\n        <Navbar collapseOnSelect bg=\"light\" expand=\"md\" className=\"mb-3\">\r\n          <LinkContainer to=\"/\">\r\n            <Navbar.Brand className=\"font-weight-bold text-muted\">\r\n              Lydia\r\n            </Navbar.Brand>\r\n          </LinkContainer>\r\n          <Navbar.Toggle />\r\n          <Navbar.Collapse className=\"justify-content-end\">\r\n            <Nav activeKey={window.location.pathname}>\r\n              {isAuthenticated ? (\r\n                <>\r\n                  <LinkContainer to=\"/accounts\">\r\n                    <Nav.Link>Accounts</Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/transactions\">\r\n                    <Nav.Link>Transactions</Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/templates\">\r\n                    <Nav.Link>Templates</Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/settings\">\r\n                    <Nav.Link>{email}</Nav.Link>\r\n                  </LinkContainer>\r\n                  <Nav.Link onClick={handleLogout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <LinkContainer to=\"/signup\">\r\n                    <Nav.Link>Signup</Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/login\">\r\n                    <Nav.Link>Login</Nav.Link>\r\n                  </LinkContainer>\r\n                </>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n        <AppContext.Provider value={{ \r\n          isAuthenticated, userHasAuthenticated, accounts, templates, refreshTemplates, refreshAccounts, currentAccId, setCurrentAccId, \r\n          templateColumnState, setTemplateColumnState, templateFilterModel, setTemplateFilterModel, recalcRequired, setRecalcRequired,\r\n          setStateToBeRefreshed, changeAccountsOrder, saveAccountSet,\r\n          archive, setArchive, saveArchiveRequired, setSaveArchiveRequired, transAcc, setTransAcc, saveRequired, setSaveRequired\r\n        }}>\r\n          <Routes />\r\n        </AppContext.Provider>\r\n      </div>\r\n    )\r\n  )\r\n}\r\n\r\nexport default App","C:\\Code\\lydia-client\\src\\config.js",[],"C:\\Code\\lydia-client\\src\\Routes.js",[],"C:\\Code\\lydia-client\\src\\libs\\errorLib.js",[],"C:\\Code\\lydia-client\\src\\libs\\contextLib.js",[],"C:\\Code\\lydia-client\\src\\containers\\Home.js",[],"C:\\Code\\lydia-client\\src\\containers\\Signup.js",[],"C:\\Code\\lydia-client\\src\\containers\\Login.js",["258","259","260"],"C:\\Code\\lydia-client\\src\\containers\\NotFound.js",[],"C:\\Code\\lydia-client\\src\\containers\\Settings.js",[],"C:\\Code\\lydia-client\\src\\components\\AuthenticatedRoute.js",[],"C:\\Code\\lydia-client\\src\\components\\UnauthenticatedRoute.js",[],"C:\\Code\\lydia-client\\src\\components\\LoaderButton.js",[],"C:\\Code\\lydia-client\\src\\libs\\hooksLib.js",[],"C:\\Code\\lydia-client\\src\\components\\BillingForm.js",[],"C:\\Code\\lydia-client\\src\\containers\\Account.js",[],"C:\\Code\\lydia-client\\src\\libs\\utilities.js",[],"C:\\Code\\lydia-client\\src\\containers\\ResetPassword.js",[],"C:\\Code\\lydia-client\\src\\containers\\Templates.js",[],"C:\\code\\lydia-client\\src\\index.js",[],["261","262"],"C:\\code\\lydia-client\\src\\App.js",["263"],"C:\\code\\lydia-client\\src\\registerServiceWorker.js",[],"C:\\code\\lydia-client\\src\\config.js",[],"C:\\code\\lydia-client\\src\\Routes.js",[],"C:\\code\\lydia-client\\src\\libs\\errorLib.js",[],"C:\\code\\lydia-client\\src\\libs\\contextLib.js",[],"C:\\code\\lydia-client\\src\\containers\\NotFound.js",[],"C:\\code\\lydia-client\\src\\containers\\Home.js",[],"C:\\code\\lydia-client\\src\\containers\\Login.js",[],"C:\\code\\lydia-client\\src\\containers\\Settings.js",[],"C:\\code\\lydia-client\\src\\containers\\Signup.js",[],"C:\\code\\lydia-client\\src\\containers\\Account.js",[],"C:\\code\\lydia-client\\src\\containers\\Templates.js",[],"C:\\code\\lydia-client\\src\\containers\\ResetPassword.js",[],"C:\\code\\lydia-client\\src\\components\\UnauthenticatedRoute.js",[],"C:\\code\\lydia-client\\src\\components\\AuthenticatedRoute.js",[],"C:\\code\\lydia-client\\src\\components\\LoaderButton.js",[],"C:\\code\\lydia-client\\src\\libs\\hooksLib.js",[],"C:\\code\\lydia-client\\src\\libs\\utilities.js",[],"C:\\code\\lydia-client\\src\\components\\BillingForm.js",[],"C:\\code\\lydia-client\\src\\containers\\Template.js",[],"C:\\Code\\lydia-client\\src\\containers\\Template.js",[],"C:\\Code\\lydia-client\\src\\containers\\Accounts.js",[],"C:\\Code\\lydia-client\\src\\containers\\Transactions.js",["264"],"import React, { useState, useEffect } from \"react\"\r\nimport { Row, Col, Button, ButtonToolbar, ButtonGroup, Tabs, Tab} from \"react-bootstrap\"\r\nimport Moment from \"moment\"\r\nimport { calculate, deleteFutureAllTransactions, trim, archiveRebalance } from \"../libs/calculate\"\r\nimport { Storage } from \"aws-amplify\"\r\nimport { AgGridColumn, AgGridReact } from \"ag-grid-react\"\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\"\r\nimport \"ag-grid-community/dist/styles/ag-theme-bootstrap.css\"\r\nimport { useAppContext } from \"../libs/contextLib\"\r\nimport { onError } from \"../libs/errorLib\"\r\nimport { today, uuid, beginning } from \"../libs/utilities\"\r\nimport InterestPopUp from \"../components/InterestPopUp\"\r\nimport ArchivePopUp from \"../components/ArchivePopUp\"\r\nimport Summary from \"../components/Summary\"\r\nimport \"./Transactions.css\"\r\n\r\nconst Transactions = () => {\r\n  const { isAuthenticated, accounts, templates, transAcc, currentAccId, archive, recalcRequired, saveRequired, saveArchiveRequired,\r\n          setRecalcRequired, setTransAcc, setSaveArchiveRequired, setSaveRequired,\r\n          setArchive, setCurrentAccId } = useAppContext()\r\n  const [gridApi, setGridApi] = useState({})\r\n  const [interestAcc, setInterestAcc] = useState(false)\r\n  const [showInterest, setShowInterest] = useState(false)\r\n  const [showArchive, setShowArchive] = useState(false)\r\n  const [showTrim, setShowTrim] = useState(false)\r\n  const [archiveFile, setArchiveFile] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n\r\n      console.log('Transactions: useEffect')\r\n\r\n      if (!isAuthenticated) {\r\n        return\r\n      }\r\n\r\n      try {\r\n        if (!transAcc)\r\n          await handleLoad()\r\n        else\r\n        {\r\n          if (currentAccId)\r\n          {\r\n            const acc = transAcc.find(ta => ta.accountId === currentAccId)\r\n            if (acc) setInterestAcc(acc.interest)\r\n          }\r\n        }\r\n      } catch (e) {\r\n        onError(e)\r\n      }\r\n    }\r\n    onLoad()\r\n  }, [isAuthenticated, transAcc, currentAccId])\r\n\r\n  const amountFilterOptions = { \r\n    filterOptions: [\r\n      {\r\n        displayKey: 'equals',\r\n        displayName: 'Equals',\r\n        test: (filterValue, cellValue) => parseInt(cellValue, 10) / 100 === filterValue\r\n      },\r\n      {\r\n        displayKey: 'lessthan',\r\n        displayName: 'Less than',\r\n        test: (filterValue, cellValue) => parseInt(cellValue, 10) / 100 < filterValue\r\n      },\r\n      {\r\n        displayKey: 'greaterthan',\r\n        displayName: 'Greater than',\r\n        test: (filterValue, cellValue) => parseInt(cellValue, 10) / 100 > filterValue\r\n      }\r\n    ]\r\n  }\r\n\r\n  const balanceCellFormatter = params => params.value < 0 ? { color: \"red\" } : null\r\n\r\n  const amountParser = params => {\r\n    const val = Number(params.newValue)\r\n    if (isNaN(val)) return params.oldValue\r\n    return Math.round(val * 100)\r\n  }\r\n\r\n  const amountFormatter = params => {\r\n    const val = parseInt(params.value, 10) / 100\r\n    if (val) return val.toFixed(2)\r\n    return \"\"\r\n  }\r\n\r\n  const reconciledFormatter = params => String.fromCharCode(parseInt( params.value === 1 ? \"2713\" : params.value === 2 ? \"2705\" : \"0020\" ,16))\r\n\r\n  const reconciledCellStyle = params => ({paddingLeft:`${params.value === 1 ? 0.3 : 0}rem`, 'font-style':'normal', 'text-overflow':'clip'})\r\n\r\n  const balanceFormatter = params => (parseInt(params.value, 10) / 100).toFixed(2)\r\n\r\n  const dateFormatter = params => Moment(params.value).format(\"Do MMM YY\")\r\n\r\n  const dateFilterOptions = { \r\n    comparator: (filterLocalDateAtMidnight, cellValue) => {\r\n      const dateParts = cellValue.substring(0,10).split(\"-\")\r\n      const day = Number(dateParts[2])\r\n      const month = Number(dateParts[1]) - 1\r\n      const year = Number(dateParts[0])\r\n      const cellDate = new Date(year, month, day)\r\n      if (cellDate < filterLocalDateAtMidnight) return -1\r\n      else if (cellDate > filterLocalDateAtMidnight) return 1\r\n      else return 0\r\n    }\r\n  }\r\n\r\n  const getRowStyle = params => {\r\n    const rowStyle = {}\r\n    if (Moment(params.node.data.date).startOf(\"date\").isSameOrBefore(today, \"day\"))\r\n      rowStyle[\"background-color\"] = params.node.rowIndex % 2 === 0 ? \"#C3C3C3\" : \"#D3D3D3\"\r\n    if (params.node.rowIndex === 0) rowStyle[\"font-weight\"] = \"bold\"\r\n    if (!params.node.data.autogen) rowStyle[\"font-style\"] = \"italic\"\r\n    if (params.node.data.newRate) rowStyle[\"color\"] = \"#0000FF\"\r\n    return rowStyle\r\n  }\r\n\r\n  const rowEditable = node => node.data.transactionId !== 0 && ((Moment(node.data.date).isSameOrBefore(today, \"day\")) || (!node.data.autogen)) &&  (!node.data.newRate)\r\n \r\n  const onCellClicked = node => {\r\n    if (node.column.colId === \"reconciled\" && node.rowIndex > 0)\r\n      if (Moment(node.data.date).isSameOrBefore(today, \"day\")){\r\n        let localTransAcc = transAcc\r\n        const acc = localTransAcc.find(ta => ta.accountId === currentAccId)\r\n        const trans = acc.trans.find(t => t.transactionId === node.data.transactionId)\r\n        if (isNaN(trans.reconciled) || trans.reconciled === null ) trans.reconciled = 0\r\n        trans.reconciled++\r\n        if (trans.reconciled === 3) trans.reconciled = 0\r\n        node.data.reconciled = trans.reconciled\r\n        setTransAcc(localTransAcc)\r\n        if (archive) setSaveArchiveRequired(true)\r\n        else setSaveRequired(true)\r\n        gridApi[currentAccId].refreshCells()\r\n      }\r\n  }\r\n\r\n  const handleRecalculate = () => {\r\n    let localTransAcc\r\n    if (archive) {\r\n      localTransAcc = archiveRebalance( transAcc, today )\r\n      setSaveArchiveRequired(true)\r\n    }\r\n    else {\r\n      localTransAcc = calculate( accounts, templates, transAcc, today )\r\n       setSaveRequired(true)\r\n    }\r\n    setTransAcc(localTransAcc)\r\n    localTransAcc.forEach(account => insertDataIntoGrid(account,gridApi[account.accountId]))\r\n    setRecalcRequired(false)\r\n  }\r\n\r\n  const handleSave = () => {\r\n    let localTransAcc = deleteFutureAllTransactions(accounts, transAcc, today, false)\r\n    const key = \"data2.txt\"\r\n    let dataToSave = [accounts, templates, localTransAcc, today.format()]\r\n    let strToSave = JSON.stringify(dataToSave)\r\n    Storage.put(key, strToSave, {\r\n      level: \"private\",\r\n      contentType: \"application/json\"\r\n    })\r\n      .then(result => {setSaveRequired(false)\r\n      alert(\"Transactions saved successfully\")})\r\n      .catch(err => alert(err))\r\n  }\r\n\r\n  const handleLoad = async () => {\r\n    const key = \"data2.txt\"\r\n//   let key = \"Archive-2019-05-20.arc\"\r\n    let localTransAcc = []\r\n    // Storage.get(key, { level: \"private\", download: true })\r\n    //   .then(result => {\r\n    //     console.log(result.Body)\r\n    //     let res = new TextDecoder(\"utf-8\").decode(result.Body)\r\n    const data = await Storage.get(key, { level: \"private\", download: true })\r\n    data.Body.text().then( result => {\r\n        let dataToRestore = JSON.parse(result)\r\n        // Reconstruct data as of when it was saved including using the templates that existed then as well\r\n        // as the date at that time\r\n        localTransAcc = calculate(...dataToRestore)\r\n        // Now recalculate the data based on today's date and templates\r\n        localTransAcc = calculate( accounts, templates, localTransAcc, today )\r\n        selectAccount(currentAccId)\r\n        setTransAcc(localTransAcc)\r\n        localTransAcc.forEach(account => insertDataIntoGrid(account,gridApi[account.accountId]))\r\n        setSaveRequired(false)\r\n        setSaveArchiveRequired(false)\r\n        setRecalcRequired(false)\r\n        setArchive(false)\r\n      })\r\n      .catch(err => {\r\n        if (err.statusCode === 403) {\r\n          localTransAcc = calculate( accounts, templates, localTransAcc, today )\r\n          selectAccount(currentAccId)\r\n          setTransAcc(localTransAcc)\r\n          localTransAcc.forEach(account => insertDataIntoGrid(account,gridApi[account.accountId]))\r\n          setSaveRequired(false)\r\n          setSaveArchiveRequired(false)          \r\n          setRecalcRequired(false)\r\n          setArchive(false)\r\n        } else console.log(err)\r\n      })\r\n  }\r\n\r\n  const insertDataIntoGrid = (account,api) => {\r\n    let data =[]\r\n    if (account) {\r\n      let desc = \"Opening Balance\"\r\n      if (account.interest)\r\n        desc = `Int=${(account.starting.interest / 100).toFixed(2)} db=${account.starting.dbRate} cr=${account.starting.crRate}`\r\n      data = [\r\n        {\r\n          transactionId: 0,\r\n          date: account.starting.date,\r\n          description: desc,\r\n          balance: account.starting.balance\r\n        },\r\n        ...account.trans\r\n      ]\r\n    }\r\n    if (api) {\r\n      api.setRowData(data)\r\n      api.refreshCells()\r\n    }\r\n  }\r\n  \r\n  const insertDataIntoCurrentGrid = parmsTransAcc => {\r\n    const acc = parmsTransAcc.find(ta => ta.accountId === currentAccId)\r\n    insertDataIntoGrid( acc, gridApi[acc.accountId] ) \r\n  }\r\n\r\n  const handleDuplicate = () => {\r\n    const nodes = gridApi[currentAccId].getSelectedNodes()\r\n    if (nodes.length) {\r\n      const data = nodes[0].data\r\n      const newDate = Moment(data.date)\r\n\r\n      let newNode = {\r\n        date: newDate.format(\"YYYY-MM-DD\"),\r\n        sortKey: newDate.diff(beginning,'days'),\r\n        autogen: null,\r\n        type: \"manual\",\r\n        transactionId: uuid(),\r\n        dbAmount: data.dbAmount,\r\n        crAmount: data.crAmount,\r\n        crRate: data.crRate,\r\n        dbRate: data.dbRate,\r\n        periodInterest: data.periodInterest,\r\n        lineInterest: data.lineInterest,\r\n        description: data.description\r\n      }\r\n      let localTransAcc = transAcc\r\n      const acc = localTransAcc.find(ta => ta.accountId === currentAccId)\r\n      acc.trans.push(newNode)\r\n      localTransAcc = calculate( accounts, templates, localTransAcc, today )\r\n      setTransAcc(localTransAcc)\r\n      insertDataIntoCurrentGrid(localTransAcc)\r\n      setSaveRequired(true)\r\n      setRecalcRequired(false)\r\n    }\r\n  }\r\n  \r\n  const handleDelete = () => {\r\n    const nodes = gridApi[currentAccId].getSelectedNodes()\r\n    if (nodes.length) {\r\n      let localTransAcc = transAcc\r\n      let acc = localTransAcc.find(ta => ta.accountId === currentAccId)\r\n      let data = nodes[0].data\r\n      acc.trans = acc.trans.filter(t => t.transactionId !== data.transactionId)\r\n      nodes[0].setData(data)\r\n\r\n      localTransAcc = calculate( accounts, templates, localTransAcc, today )\r\n      setTransAcc(localTransAcc)\r\n      insertDataIntoCurrentGrid(localTransAcc)\r\n      setSaveRequired(true)\r\n      setRecalcRequired(false)\r\n    }\r\n  }\r\n\r\n  const handleManual = () => {\r\n    const nodes = gridApi[currentAccId].getSelectedNodes()\r\n    if (nodes.length) {\r\n      let localTransAcc = transAcc\r\n      let acc = localTransAcc.find(ta => ta.accountId === currentAccId)\r\n      let data = nodes[0].data\r\n      let transToUpdate = acc.trans.find(t => t.transactionId === data.transactionId )\r\n      data.autogen = null\r\n      transToUpdate.autogen = null\r\n      transToUpdate.type = \"manual\"\r\n      nodes[0].setData(data)\r\n      setTransAcc(localTransAcc)\r\n      setRecalcRequired(true)\r\n      setSaveRequired(true)\r\n      let params = { rowNodes: nodes }\r\n      gridApi[currentAccId].refreshCells(params)\r\n    }\r\n  }\r\n\r\n  const handleAdd = () => {\r\n    const newNode = {\r\n      date: today.format(\"YYYY-MM-DD\"),\r\n      sortKey: today.diff(beginning,'days'),\r\n      autogen: null,\r\n      type: \"manual\",\r\n      transactionId: uuid(),\r\n      dbAmount: 0,\r\n      crAmount: 0,\r\n      description: \"New Item\"\r\n    }\r\n    let localTransAcc = transAcc\r\n    const acc = localTransAcc.find(ta => ta.accountId === currentAccId)\r\n    acc.trans.push(newNode)\r\n    localTransAcc = calculate( accounts, templates, localTransAcc, today )\r\n    setTransAcc(localTransAcc)\r\n    insertDataIntoCurrentGrid(localTransAcc)\r\n    setSaveRequired(true)\r\n    setRecalcRequired(false)\r\n  }\r\n\r\n  const handleInterestCommit = (newRateValue, newRateCredit, intFirstAppliedDate) => {\r\n    const newRate = parseFloat(newRateValue).toFixed(2)\r\n    let desc\r\n    if (newRateCredit) desc = \" New credit rate: \" + newRate + \"%\"\r\n    else desc = \" New debit rate: \" + newRate + \"%\"\r\n    const newDate = Moment(intFirstAppliedDate)\r\n    const newNode = {\r\n      date: newDate.format(\"YYYY-MM-DD\"),\r\n      sortKey: newDate.diff(beginning,'days'),\r\n      autogen: null,\r\n      type: \"manual\",\r\n      transactionId: uuid(),\r\n      newRate: newRate / 100,\r\n      credit: newRateCredit,\r\n      description: desc,\r\n      dbAmount: 0,\r\n      crAmount: 0\r\n    }\r\n    let localTransAcc = transAcc\r\n    const acc = localTransAcc.find(ta => ta.accountId === currentAccId)\r\n    acc.trans.push(newNode)\r\n    localTransAcc = calculate( accounts, templates, localTransAcc, today )\r\n    setTransAcc(localTransAcc)\r\n    insertDataIntoCurrentGrid(localTransAcc)\r\n    setSaveRequired(true)\r\n    setRecalcRequired(false)\r\n    setShowInterest(false)\r\n  }\r\n\r\n  const handleTrimCommit = trimEndDate => {\r\n    const localTransAcc = transAcc\r\n    const trimDate = Moment(trimEndDate)\r\n    trim(localTransAcc, trimDate)\r\n    setTransAcc(localTransAcc)\r\n    localTransAcc.forEach(account => insertDataIntoGrid( account, gridApi[account.accountId]) )\r\n    setSaveRequired(true)\r\n    setRecalcRequired(true)\r\n    setShowTrim(false)\r\n  }\r\n\r\n  const handleArchiveLoad = () => {\r\n    const key = \"archive.json\"\r\n    let localTransAcc = []\r\n\r\n    Storage.get(key, { level: \"private\", download: true })\r\n      .then(result => {\r\n        const res = new TextDecoder(\"utf-8\").decode(result.Body)\r\n        const dataToRestore = JSON.parse(res)\r\n//        localTransAcc = deleteFutureAllTransactions(dataToRestore[0],dataToRestore[2],dataToRestore[3])\r\n        // console.log(dataToRestore)\r\n        if (!Array.isArray(dataToRestore[0])) {\r\n          // console.log('Ultra New archive format')\r\n          localTransAcc = dataToRestore\r\n        } else if ((dataToRestore).length === 4) {\r\n          // console.log('Old archive format')\r\n          localTransAcc = dataToRestore[2]\r\n//          setArchiveDate(dataToRestore[3])\r\n        } else if ((dataToRestore).length === 2) {\r\n          // console.log('New archive format')\r\n          localTransAcc = dataToRestore[0]\r\n//          setArchiveDate(dataToRestore[1])\r\n        } else console.log('Invalid archive format!')\r\n\r\n        setArchiveFile(key)\r\n        // let currentAccId = 0\r\n        // if (localTransAcc.length > 0) currentAccId = localTransAcc[0].accountId\r\n        setTransAcc(localTransAcc)\r\n        localTransAcc.forEach(account => insertDataIntoGrid( account, gridApi[account.accountId] ))\r\n        selectAccount(currentAccId)\r\n        setSaveRequired(false)\r\n        setSaveArchiveRequired(false)\r\n        setRecalcRequired(false)\r\n        setArchive(true)\r\n      })\r\n      .catch(err => {\r\n        if (err.statusCode === 403) alert(\"No archive found\")\r\n        else console.log(err)\r\n      })\r\n  }\r\n\r\n  const handleArchiveCommit = (archiveEndDate) => {\r\n    const endDate = Moment(archiveEndDate)\r\n    const archive = deleteFutureAllTransactions( accounts, transAcc, endDate, true )\r\n    //let key = `Archive-${endDate.format(\"YYYY-MM-DD\")}.arc`\r\n    const key = 'archive.json'\r\n    // setArchiveDate( endDate.format(\"YYYY-MM-DD\")\r\n    //const dataToSave = [accounts,[],archive,endDate.format()]\r\n    // const dataToSave = [archive,endDate.format(\"YYYY-MM-DD\")]\r\n    // const strToSave = JSON.stringify(dataToSave)\r\n    const strToSave = JSON.stringify(archive)\r\n    Storage.put(key, strToSave, {\r\n      level: \"private\",\r\n      contentType: \"application/json\"\r\n    })\r\n      .then(result => {\r\n        setSaveRequired(false)\r\n        setSaveArchiveRequired(false)\r\n        alert(\"Archive saved successfully\")\r\n    })\r\n      .catch(err => alert(err))\r\n    setShowArchive(false)\r\n  }\r\n\r\n  const handleArchiveSave = () => {\r\n    //const endDate = Moment(archiveDate)\r\n    const key = archiveFile\r\n    //const dataToSave = [transAcc,endDate.format(\"YYYY-MM-DD\")]\r\n    //const strToSave = JSON.stringify(dataToSave)\r\n    const strToSave = JSON.stringify(transAcc)\r\n    Storage.put(key, strToSave, {\r\n      level: \"private\",\r\n      contentType: \"application/json\"\r\n    })\r\n      .then(result => {\r\n        setSaveRequired(false)\r\n        setSaveArchiveRequired(false)\r\n        alert(\"Archive saved successfully\")\r\n    })\r\n      .catch(err => alert(err))\r\n  }\r\n\r\n  const updateRow = node => {\r\n    const localTransAcc = transAcc\r\n    const acc = localTransAcc.find(account => account.accountId === currentAccId)\r\n    const data = node.data\r\n    if (Moment(data.date).isAfter(today)) data.reconciled = 0\r\n    const transToUpdate = acc.trans.find(transaction => transaction.transactionId === data.transactionId)\r\n    transToUpdate.description = data.description\r\n    transToUpdate.date = data.date\r\n    transToUpdate.sortKey = Moment(data.date).diff(beginning,'days')\r\n    transToUpdate.reconciled = data.reconciled\r\n    transToUpdate.crAmount = data.crAmount\r\n    transToUpdate.dbAmount = data.dbAmount\r\n    setTransAcc(localTransAcc)\r\n    setRecalcRequired(true)\r\n    if (archive)\r\n      setSaveArchiveRequired(true)\r\n    else\r\n      setSaveRequired(true)\r\n    gridApi[currentAccId].refreshCells()\r\n  }\r\n\r\n  const selectAccount = eventKey => {\r\n    setCurrentAccId(eventKey)\r\n    let interestAcc = false\r\n    if (transAcc) {\r\n      const acc = transAcc.find(ta => ta.accountId === eventKey)\r\n      if (acc) interestAcc = acc.interest\r\n    }\r\n    setInterestAcc(interestAcc)\r\n  }\r\n\r\n  const h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0) - 280\r\n  const divStyle = { boxSizing: \"border-box\", height: `${h}px` }\r\n  const descriptionWidth = Math.min(Math.max(Math.max(document.documentElement.clientWidth, window.innerWidth || 0) - 1266,234),630)\r\n  const isSummary = currentAccId === \"0\"\r\n\r\n  const debug = true\r\n\r\n  return (\r\n    <div className=\"transactions\">\r\n      <h1>Transactions {archive ? \"- ARCHIVE\" : \"\"}</h1>\r\n      {transAcc && \r\n      <div>\r\n      <InterestPopUp\r\n        show={showInterest} \r\n        onHide={() => setShowInterest(false)} \r\n        onSubmit={handleInterestCommit} \r\n      />\r\n      <ArchivePopUp\r\n        show={showArchive}\r\n        type=\"Archive\"\r\n        onHide={() => setShowArchive(false)}\r\n        onSubmit={handleArchiveCommit}\r\n      />\r\n      <ArchivePopUp\r\n        show={showTrim}\r\n        type=\"Trim\"\r\n        onHide={() => setShowTrim(false)}\r\n        onSubmit={handleTrimCommit}\r\n      />        \r\n      <Tabs\r\n        defaultActiveKey={0}\r\n        transition={false}\r\n        id=\"trans-tab\"\r\n        activeKey={currentAccId}\r\n        onSelect={selectAccount}\r\n      >\r\n        <Tab key={0} eventKey={0} title=\"Summary\">\r\n          <Summary />\r\n        </Tab>\r\n        {transAcc\r\n          .filter(account => !account.hide)\r\n          .sort((a,b) => (a.sortOrder - b.sortOrder))\r\n          .map((ta) => (\r\n            <Tab key={ta.accountId} eventKey={ta.accountId} title={ta.accName}>\r\n              <div\r\n                id=\"transGrid\"\r\n                style={divStyle}\r\n                className=\"ag-theme-bootstrap\"\r\n              >\r\n                <AgGridReact\r\n                  defaultColDef={{\r\n                    resizable : true\r\n                  }}\r\n                  headerHeight={30}\r\n                  rowSelection=\"single\"\r\n                  rowBuffer={30}\r\n                  onCellEditingStopped={updateRow}\r\n                  onCellClicked={onCellClicked}\r\n                  rowDeselection={true}\r\n                  immutableData={true}\r\n                  getRowNodeId={data => data.transactionId}\r\n                  getRowStyle={getRowStyle}\r\n                  isRowSelectable={node => node.data.transactionId !== 0}\r\n                  onGridReady={params => {\r\n                    setGridApi({...gridApi,[ta.accountId]:params.api})\r\n                    let currAcc\r\n                    if (transAcc)\r\n                      currAcc = transAcc.find(y => y.accountId === ta.accountId)\r\n                    insertDataIntoGrid( currAcc, params.api)\r\n                  }}\r\n                >\r\n                  <AgGridColumn headerName=\"\" field=\"reconciled\" width={22} cellStyle={reconciledCellStyle} valueFormatter={reconciledFormatter} ></AgGridColumn>\r\n                  <AgGridColumn headerName=\"Date\" field=\"date\" width={110} filter=\"agDateColumnFilter\" filterParams={dateFilterOptions} cellStyle={{'textAlign':'right'}} valueFormatter={dateFormatter}></AgGridColumn>\r\n                  <AgGridColumn headerName=\"Description\" field=\"description\" width={descriptionWidth} editable={rowEditable} filter=\"agTextColumnFilter\" cellEditor=\"agTextCellEditor\"></AgGridColumn>\r\n                  <AgGridColumn headerName=\"Debit\" field=\"dbAmount\" width={110} editable={rowEditable} type=\"numericColumn\" valueParser={amountParser} valueFormatter={amountFormatter} filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} cellEditor=\"agTextCellEditor\" cellEditorParams={{ useFormatter: true }}></AgGridColumn>\r\n                  <AgGridColumn headerName=\"Credit\" field=\"crAmount\" width={110} editable={rowEditable} type=\"numericColumn\" valueParser={amountParser} valueFormatter={amountFormatter} filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} cellEditor=\"agTextCellEditor\" cellEditorParams={{ useFormatter: true }}></AgGridColumn>\r\n                  <AgGridColumn headerName=\"Balance\" field=\"balance\" width={115} type=\"numericColumn\" valueFormatter={balanceFormatter} filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} cellStyle={balanceCellFormatter}></AgGridColumn>\r\n                  <AgGridColumn headerName=\"cr\" field=\"crRate\" width={80} type=\"numericColumn\" filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} hide={!debug}></AgGridColumn>\r\n                  <AgGridColumn headerName=\"db\" field=\"dbRate\" width={80} type=\"numericColumn\" filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} hide={!debug}></AgGridColumn>\r\n                  <AgGridColumn headerName=\"period\" field=\"periodInterest\" width={110} type=\"numericColumn\" filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} hide={!debug}></AgGridColumn>\r\n                  <AgGridColumn headerName=\"Line\" field=\"lineInterest\" width={110} type=\"numericColumn\" filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} hide={!debug}></AgGridColumn>\r\n                </AgGridReact>\r\n              </div>\r\n            </Tab>\r\n          ))\r\n        }\r\n      </Tabs>\r\n      <Row>\r\n        <Col>\r\n          <ButtonToolbar id=\"buttons\" className=\"mb-2 float-right\">\r\n            <ButtonGroup className=\"mr-2\">\r\n              <Button variant=\"outline-secondary\" \r\n                      size=\"sm\" \r\n                      onClick={handleArchiveLoad}>\r\n                Load Archive\r\n              </Button>\r\n              <Button variant={saveArchiveRequired ? \"outline-warning\" : \"outline-secondary\"} \r\n                      size=\"sm\" \r\n                      onClick={archive ? handleArchiveSave : () => setShowArchive(true)}\r\n                      disabled={recalcRequired || saveRequired || isSummary }>\r\n                {archive ? \"Save\" : \"Archive\"}\r\n              </Button>\r\n              <Button variant=\"outline-secondary\" \r\n                      size=\"sm\" \r\n                      onClick={() => setShowTrim(true)}\r\n                      disabled={recalcRequired || saveRequired || archive || isSummary}>\r\n                Trim\r\n              </Button>\r\n              <Button variant=\"outline-secondary\" \r\n                      size=\"sm\"\r\n                      onClick={() => setShowInterest(true)}\r\n                      disabled={!interestAcc || archive}>\r\n                Interest\r\n              </Button>\r\n              <Button variant=\"outline-secondary\" \r\n                      size=\"sm\"\r\n                      onClick={handleAdd}\r\n                      disabled={archive || isSummary}>                \r\n                Add\r\n              </Button>\r\n              <Button variant=\"outline-secondary\" \r\n                      size=\"sm\" \r\n                      onClick={handleDuplicate}\r\n                      disabled={archive || isSummary}>\r\n                Duplicate\r\n              </Button>\r\n              <Button variant=\"outline-secondary\" \r\n                      size=\"sm\"\r\n                      onClick={handleDelete} \r\n                      disabled={archive || isSummary}>\r\n                Delete\r\n              </Button>\r\n              <Button variant=\"outline-secondary\" \r\n                      size=\"sm\"\r\n                      onClick={handleManual} \r\n                      disabled={archive || isSummary}>\r\n                Manual\r\n              </Button>\r\n              <Button variant=\"outline-secondary\" \r\n                      size=\"sm\"\r\n                      onClick={handleLoad}>\r\n                Load\r\n              </Button>\r\n              <Button variant={saveRequired ? \"warning\" : \"outline-secondary\"}\r\n                      size=\"sm\"\r\n                      onClick={handleSave}\r\n                      disabled={archive}>\r\n                Save\r\n              </Button>\r\n            </ButtonGroup>\r\n            <ButtonGroup>\r\n              <Button variant={recalcRequired ? \"warning\" : \"success\"}\r\n                      size=\"sm\"\r\n                      onClick={handleRecalculate}>\r\n                Recalculate\r\n              </Button>\r\n            </ButtonGroup>\r\n          </ButtonToolbar>\r\n        </Col>\r\n      </Row>\r\n      </div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Transactions","C:\\Code\\lydia-client\\src\\components\\Summary.js",[],"C:\\Code\\lydia-client\\src\\components\\ArchivePopUp.js",[],"C:\\Code\\lydia-client\\src\\components\\InterestPopUp.js",[],"C:\\Code\\lydia-client\\src\\libs\\calculate.js",[],"C:\\Code\\lydia-client\\src\\containers\\ChangePassword.js",[],"C:\\Code\\lydia-client\\src\\containers\\ChangeEmail.js",[],"C:\\Code\\lydia-client\\src\\components\\ConfirmationCode.js",[],"C:\\code\\lydia-client\\src\\containers\\ChangePassword.js",[],"C:\\code\\lydia-client\\src\\containers\\ChangeEmail.js",[],"C:\\code\\lydia-client\\src\\containers\\Accounts.js",[],"C:\\code\\lydia-client\\src\\containers\\Transactions.js",["265"],"C:\\code\\lydia-client\\src\\components\\Summary.js",[],"C:\\code\\lydia-client\\src\\components\\ArchivePopUp.js",[],"C:\\code\\lydia-client\\src\\components\\ConfirmationCode.js",[],"C:\\code\\lydia-client\\src\\components\\InterestPopUp.js",[],"C:\\code\\lydia-client\\src\\libs\\calculate.js",[],{"ruleId":"266","replacedBy":"267"},{"ruleId":"268","replacedBy":"269"},{"ruleId":"270","severity":1,"message":"271","line":58,"column":6,"nodeType":"272","endLine":58,"endColumn":26,"suggestions":"273"},{"ruleId":"274","severity":1,"message":"275","line":14,"column":11,"nodeType":"276","messageId":"277","endLine":14,"endColumn":31},{"ruleId":"274","severity":1,"message":"278","line":14,"column":33,"nodeType":"276","messageId":"277","endLine":14,"endColumn":48},{"ruleId":"274","severity":1,"message":"279","line":14,"column":50,"nodeType":"276","messageId":"277","endLine":14,"endColumn":66},{"ruleId":"266","replacedBy":"280"},{"ruleId":"268","replacedBy":"281"},{"ruleId":"270","severity":1,"message":"271","line":57,"column":6,"nodeType":"272","endLine":57,"endColumn":26,"suggestions":"282"},{"ruleId":"270","severity":1,"message":"283","line":53,"column":6,"nodeType":"272","endLine":53,"endColumn":47,"suggestions":"284"},{"ruleId":"270","severity":1,"message":"283","line":53,"column":6,"nodeType":"272","endLine":53,"endColumn":47,"suggestions":"285"},"no-native-reassign",["286"],"no-negated-in-lhs",["287"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'refreshAccounts' and 'refreshTemplates'. Either include them or remove the dependency array.","ArrayExpression",["288"],"no-unused-vars","'userHasAuthenticated' is assigned a value but never used.","Identifier","unusedVar","'refreshAccounts' is assigned a value but never used.","'refreshTemplates' is assigned a value but never used.",["286"],["287"],["289"],"React Hook useEffect has a missing dependency: 'handleLoad'. Either include it or remove the dependency array.",["290"],["291"],"no-global-assign","no-unsafe-negation",{"desc":"292","fix":"293"},{"desc":"292","fix":"294"},{"desc":"295","fix":"296"},{"desc":"295","fix":"297"},"Update the dependencies array to be: [refreshAccounts, refreshTemplates, stateToBeRefreshed]",{"range":"298","text":"299"},{"range":"300","text":"299"},"Update the dependencies array to be: [isAuthenticated, transAcc, currentAccId, handleLoad]",{"range":"301","text":"302"},{"range":"303","text":"302"},[2150,2170],"[refreshAccounts, refreshTemplates, stateToBeRefreshed]",[2114,2134],[1986,2027],"[isAuthenticated, transAcc, currentAccId, handleLoad]",[1986,2027]]