[{"C:\\Code\\lydia-client\\src\\index.js":"1","C:\\Code\\lydia-client\\src\\registerServiceWorker.js":"2","C:\\Code\\lydia-client\\src\\App.js":"3","C:\\Code\\lydia-client\\src\\config.js":"4","C:\\Code\\lydia-client\\src\\Routes.js":"5","C:\\Code\\lydia-client\\src\\libs\\errorLib.js":"6","C:\\Code\\lydia-client\\src\\libs\\contextLib.js":"7","C:\\Code\\lydia-client\\src\\containers\\Home.js":"8","C:\\Code\\lydia-client\\src\\containers\\Signup.js":"9","C:\\Code\\lydia-client\\src\\containers\\Login.js":"10","C:\\Code\\lydia-client\\src\\containers\\NotFound.js":"11","C:\\Code\\lydia-client\\src\\containers\\Settings.js":"12","C:\\Code\\lydia-client\\src\\components\\AuthenticatedRoute.js":"13","C:\\Code\\lydia-client\\src\\components\\UnauthenticatedRoute.js":"14","C:\\Code\\lydia-client\\src\\components\\LoaderButton.js":"15","C:\\Code\\lydia-client\\src\\libs\\hooksLib.js":"16","C:\\Code\\lydia-client\\src\\components\\BillingForm.js":"17","C:\\Code\\lydia-client\\src\\containers\\Account.js":"18","C:\\Code\\lydia-client\\src\\libs\\utilities.js":"19","C:\\Code\\lydia-client\\src\\containers\\ResetPassword.js":"20","C:\\Code\\lydia-client\\src\\containers\\Templates.js":"21","C:\\code\\lydia-client\\src\\index.js":"22","C:\\code\\lydia-client\\src\\App.js":"23","C:\\code\\lydia-client\\src\\registerServiceWorker.js":"24","C:\\code\\lydia-client\\src\\config.js":"25","C:\\code\\lydia-client\\src\\Routes.js":"26","C:\\code\\lydia-client\\src\\libs\\errorLib.js":"27","C:\\code\\lydia-client\\src\\libs\\contextLib.js":"28","C:\\code\\lydia-client\\src\\containers\\NotFound.js":"29","C:\\code\\lydia-client\\src\\containers\\Home.js":"30","C:\\code\\lydia-client\\src\\containers\\Login.js":"31","C:\\code\\lydia-client\\src\\containers\\Settings.js":"32","C:\\code\\lydia-client\\src\\containers\\Signup.js":"33","C:\\code\\lydia-client\\src\\containers\\Account.js":"34","C:\\code\\lydia-client\\src\\containers\\Templates.js":"35","C:\\code\\lydia-client\\src\\containers\\ResetPassword.js":"36","C:\\code\\lydia-client\\src\\components\\UnauthenticatedRoute.js":"37","C:\\code\\lydia-client\\src\\components\\AuthenticatedRoute.js":"38","C:\\code\\lydia-client\\src\\components\\LoaderButton.js":"39","C:\\code\\lydia-client\\src\\libs\\hooksLib.js":"40","C:\\code\\lydia-client\\src\\libs\\utilities.js":"41","C:\\code\\lydia-client\\src\\components\\BillingForm.js":"42","C:\\code\\lydia-client\\src\\containers\\Template.js":"43","C:\\Code\\lydia-client\\src\\containers\\Template.js":"44","C:\\Code\\lydia-client\\src\\containers\\Accounts.js":"45","C:\\Code\\lydia-client\\src\\containers\\Transactions.js":"46","C:\\Code\\lydia-client\\src\\components\\Summary.js":"47","C:\\Code\\lydia-client\\src\\components\\ArchivePopUp.js":"48","C:\\Code\\lydia-client\\src\\components\\InterestPopUp.js":"49","C:\\Code\\lydia-client\\src\\libs\\calculate.js":"50","C:\\Code\\lydia-client\\src\\containers\\ChangePassword.js":"51","C:\\Code\\lydia-client\\src\\containers\\ChangeEmail.js":"52","C:\\Code\\lydia-client\\src\\components\\ConfirmationCode.js":"53"},{"size":1038,"mtime":1609224210304,"results":"54","hashOfConfig":"55"},{"size":4501,"mtime":1585326586609,"results":"56","hashOfConfig":"55"},{"size":5911,"mtime":1610258945337,"results":"57","hashOfConfig":"55"},{"size":1202,"mtime":1609496827743,"results":"58","hashOfConfig":"55"},{"size":2163,"mtime":1610271548025,"results":"59","hashOfConfig":"55"},{"size":203,"mtime":1609490712345,"results":"60","hashOfConfig":"55"},{"size":159,"mtime":1609490609411,"results":"61","hashOfConfig":"55"},{"size":4436,"mtime":1609497467058,"results":"62","hashOfConfig":"55"},{"size":5024,"mtime":1610511924960,"results":"63","hashOfConfig":"55"},{"size":5587,"mtime":1610527697723,"results":"64","hashOfConfig":"55"},{"size":192,"mtime":1609489988951,"results":"65","hashOfConfig":"55"},{"size":2140,"mtime":1609547019840,"results":"66","hashOfConfig":"55"},{"size":545,"mtime":1609488882329,"results":"67","hashOfConfig":"55"},{"size":890,"mtime":1609489547998,"results":"68","hashOfConfig":"55"},{"size":474,"mtime":1610270869179,"results":"69","hashOfConfig":"55"},{"size":313,"mtime":1609819180129,"results":"70","hashOfConfig":"55"},{"size":2303,"mtime":1609488987923,"results":"71","hashOfConfig":"55"},{"size":15081,"mtime":1610366163379,"results":"72","hashOfConfig":"55"},{"size":1487,"mtime":1610366278404,"results":"73","hashOfConfig":"55"},{"size":4133,"mtime":1610270301504,"results":"74","hashOfConfig":"55"},{"size":7050,"mtime":1610367394748,"results":"75","hashOfConfig":"55"},{"size":1038,"mtime":1609724119811,"results":"76","hashOfConfig":"77"},{"size":13110,"mtime":1609724119766,"results":"78","hashOfConfig":"77"},{"size":4501,"mtime":1561692682965,"results":"79","hashOfConfig":"77"},{"size":1202,"mtime":1609724119779,"results":"80","hashOfConfig":"77"},{"size":2177,"mtime":1609727075615,"results":"81","hashOfConfig":"77"},{"size":203,"mtime":1609724119815,"results":"82","hashOfConfig":"77"},{"size":159,"mtime":1609724119815,"results":"83","hashOfConfig":"77"},{"size":192,"mtime":1609724119796,"results":"84","hashOfConfig":"77"},{"size":4436,"mtime":1609724119789,"results":"85","hashOfConfig":"77"},{"size":2021,"mtime":1609724119791,"results":"86","hashOfConfig":"77"},{"size":2140,"mtime":1609724119800,"results":"87","hashOfConfig":"77"},{"size":3900,"mtime":1609724119803,"results":"88","hashOfConfig":"77"},{"size":31202,"mtime":1609724119782,"results":"89","hashOfConfig":"77"},{"size":6543,"mtime":1609724119807,"results":"90","hashOfConfig":"77"},{"size":4094,"mtime":1609724119798,"results":"91","hashOfConfig":"77"},{"size":890,"mtime":1609724119778,"results":"92","hashOfConfig":"77"},{"size":545,"mtime":1609724119771,"results":"93","hashOfConfig":"77"},{"size":474,"mtime":1609724119777,"results":"94","hashOfConfig":"77"},{"size":308,"mtime":1609724119816,"results":"95","hashOfConfig":"77"},{"size":1495,"mtime":1609724119818,"results":"96","hashOfConfig":"77"},{"size":2303,"mtime":1609724119773,"results":"97","hashOfConfig":"77"},{"size":15099,"mtime":1609732843173,"results":"98","hashOfConfig":"77"},{"size":16132,"mtime":1610364444006,"results":"99","hashOfConfig":"55"},{"size":8447,"mtime":1610432964297,"results":"100","hashOfConfig":"55"},{"size":25450,"mtime":1610446619958,"results":"101","hashOfConfig":"55"},{"size":2617,"mtime":1610262339485,"results":"102","hashOfConfig":"55"},{"size":2731,"mtime":1610181136493,"results":"103","hashOfConfig":"55"},{"size":3806,"mtime":1610522353995,"results":"104","hashOfConfig":"55"},{"size":31231,"mtime":1610366335407,"results":"105","hashOfConfig":"55"},{"size":2421,"mtime":1610273337498,"results":"106","hashOfConfig":"55"},{"size":3025,"mtime":1610273295260,"results":"107","hashOfConfig":"55"},{"size":1158,"mtime":1610526202381,"results":"108","hashOfConfig":"55"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},"qqq7rg",{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"111"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gsccot",{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"111"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Code\\lydia-client\\src\\index.js",[],["218","219"],"C:\\Code\\lydia-client\\src\\registerServiceWorker.js",[],"C:\\Code\\lydia-client\\src\\App.js",["220"],"\r\nimport React, { useState, useEffect } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport Navbar from \"react-bootstrap/Navbar\"\r\nimport Nav from \"react-bootstrap/Nav\"\r\nimport Routes from \"./Routes\"\r\nimport { LinkContainer } from \"react-router-bootstrap\"\r\nimport { AppContext } from \"./libs/contextLib\"\r\nimport { onError } from \"./libs/errorLib\"\r\nimport { Auth } from \"aws-amplify\"\r\nimport { API } from \"aws-amplify\"\r\nimport \"./App.css\"\r\n\r\nconst App = () => {\r\n  const history = useHistory()\r\n  const [isAuthenticating, setIsAuthenticating] = useState(true)\r\n  const [isAuthenticated, userHasAuthenticated] = useState(false)\r\n  const [stateToBeRefreshed, setStateToBeRefreshed] = useState(false)\r\n  const [email, setEmail] = useState(\"Settings\")\r\n  const [templates, setTemplates] = useState(null)\r\n  const [accounts, setAccounts] = useState(null)\r\n  const [transAcc, setTransAcc] = useState(null)\r\n  const [currentAccId, setCurrentAccId] = useState(0)\r\n  const [templateFilterModel, setTemplateFilterModel] = useState(null)\r\n  const [templateColumnState, setTemplateColumnState] = useState(null)\r\n  const [saveArchiveRequired, setSaveArchiveRequired] = useState(false)\r\n  const [saveRequired, setSaveRequired] = useState(false)\r\n  const [recalcRequired, setRecalcRequired] = useState(false)\r\n  const [archive, setArchive] = useState(false)\r\n\r\n  useEffect(() => {\r\n    console.log('App: useEffect')\r\n    const onLoad = async () => {\r\n      try {\r\n        let session = await Auth.currentSession()\r\n        userHasAuthenticated(true)\r\n        console.log('Session:')\r\n        console.log(session)\r\n        if (session) {\r\n          console.log('** > Before call to currentUserInfo')\r\n          const { attributes } = await Auth.currentUserInfo()\r\n          console.log('** > After call to currentUserInfo')\r\n          setEmail(attributes.email)\r\n        }\r\n        await refreshAccounts()\r\n        await refreshTemplates()\r\n      }\r\n      catch(e) {\r\n        if (e !== 'No current user') {\r\n          onError(e)\r\n        }\r\n      }\r\n    \r\n      setIsAuthenticating(false)\r\n      setStateToBeRefreshed(false)\r\n    }\r\n    onLoad()\r\n  }, [stateToBeRefreshed])\r\n  \r\n\r\n\r\n  const getAccounts = () => API.get(\"accounts\", \"/accounts\")\r\n\r\n  const getTemplates = () => API.get(\"accounts\", \"/templates\")\r\n\r\n  const refreshTemplates = async () => {\r\n    const currentTemplates = await getTemplates()\r\n    setTemplates( currentTemplates )\r\n  }\r\n\r\n  const refreshAccounts = async () => {\r\n    const accountsFromGet = await getAccounts()\r\n    const mappedAccounts = accountsFromGet.map(acc => {return {hide:false, ...acc}})\r\n    sortAndSetAccounts(mappedAccounts)\r\n  }\r\n\r\n   const sortAndSetAccounts = accs => {\r\n    accs.sort((a, b) => a.sortOrder - b.sortOrder)\r\n    setAccounts(accs)\r\n    const selectedAccount = accs.find(acc => !acc.hide)\r\n    if (selectedAccount) {\r\n     setCurrentAccId(selectedAccount.accountId)\r\n    }\r\n    else setCurrentAccId(0)\r\n  }\r\n\r\n  const changeAccountsOrder = (fromIndex, toIndex, fromSortOrder, toSortOrder) => {\r\n    const localAccounts = accounts\r\n\r\n    localAccounts[fromIndex].sortOrder = toSortOrder\r\n    localAccounts[toIndex].sortOrder = fromSortOrder\r\n    setRecalcRequired(true)\r\n    sortAndSetAccounts(localAccounts)\r\n  }\r\n\r\n  const handleLogout = async () => {\r\n    await Auth.signOut()\r\n\r\n    userHasAuthenticated(false)\r\n\r\n    history.push(\"/login\")\r\n  }\r\n\r\n  const saveAccount= account => API.put(\"accounts\", `/accounts/${account.accountId}`, {body: account})\r\n\r\n  const saveAccountSet = async (fromIndex, toIndex) => {\r\n    for (let i = fromIndex; i <= toIndex; i++)\r\n    {\r\n      await saveAccount(accounts[i])\r\n    }\r\n  }\r\n\r\n  return (\r\n    !isAuthenticating && (\r\n      <div className=\"App container py-3\">\r\n        <Navbar collapseOnSelect bg=\"light\" expand=\"md\" className=\"mb-3\">\r\n          <LinkContainer to=\"/\">\r\n            <Navbar.Brand className=\"font-weight-bold text-muted\">\r\n              Lydia\r\n            </Navbar.Brand>\r\n          </LinkContainer>\r\n          <Navbar.Toggle />\r\n          <Navbar.Collapse className=\"justify-content-end\">\r\n            <Nav activeKey={window.location.pathname}>\r\n              {isAuthenticated ? (\r\n                <>\r\n                  <LinkContainer to=\"/accounts\">\r\n                    <Nav.Link>Accounts</Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/transactions\">\r\n                    <Nav.Link>Transactions</Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/templates\">\r\n                    <Nav.Link>Templates</Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/settings\">\r\n                    <Nav.Link>{email}</Nav.Link>\r\n                  </LinkContainer>\r\n                  <Nav.Link onClick={handleLogout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <LinkContainer to=\"/signup\">\r\n                    <Nav.Link>Signup</Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/login\">\r\n                    <Nav.Link>Login</Nav.Link>\r\n                  </LinkContainer>\r\n                </>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n        <AppContext.Provider value={{ \r\n          isAuthenticated, userHasAuthenticated, accounts, templates, refreshTemplates, refreshAccounts, currentAccId, setCurrentAccId, \r\n          templateColumnState, setTemplateColumnState, templateFilterModel, setTemplateFilterModel, recalcRequired, setRecalcRequired,\r\n          setStateToBeRefreshed, changeAccountsOrder, saveAccountSet,\r\n          archive, setArchive, saveArchiveRequired, setSaveArchiveRequired, transAcc, setTransAcc, saveRequired, setSaveRequired\r\n        }}>\r\n          <Routes />\r\n        </AppContext.Provider>\r\n      </div>\r\n    )\r\n  )\r\n}\r\n\r\nexport default App","C:\\Code\\lydia-client\\src\\config.js",[],"C:\\Code\\lydia-client\\src\\Routes.js",[],"C:\\Code\\lydia-client\\src\\libs\\errorLib.js",[],"C:\\Code\\lydia-client\\src\\libs\\contextLib.js",[],"C:\\Code\\lydia-client\\src\\containers\\Home.js",[],"C:\\Code\\lydia-client\\src\\containers\\Signup.js",[],"C:\\Code\\lydia-client\\src\\containers\\Login.js",["221","222","223"],"C:\\Code\\lydia-client\\src\\containers\\NotFound.js",[],"C:\\Code\\lydia-client\\src\\containers\\Settings.js",[],"C:\\Code\\lydia-client\\src\\components\\AuthenticatedRoute.js",[],"C:\\Code\\lydia-client\\src\\components\\UnauthenticatedRoute.js",[],"C:\\Code\\lydia-client\\src\\components\\LoaderButton.js",[],"C:\\Code\\lydia-client\\src\\libs\\hooksLib.js",[],"C:\\Code\\lydia-client\\src\\components\\BillingForm.js",[],"C:\\Code\\lydia-client\\src\\containers\\Account.js",[],"C:\\Code\\lydia-client\\src\\libs\\utilities.js",[],"C:\\Code\\lydia-client\\src\\containers\\ResetPassword.js",[],"C:\\Code\\lydia-client\\src\\containers\\Templates.js",[],"C:\\code\\lydia-client\\src\\index.js",[],"C:\\code\\lydia-client\\src\\App.js",["224"],"C:\\code\\lydia-client\\src\\registerServiceWorker.js",[],"C:\\code\\lydia-client\\src\\config.js",[],"C:\\code\\lydia-client\\src\\Routes.js",[],"C:\\code\\lydia-client\\src\\libs\\errorLib.js",[],"C:\\code\\lydia-client\\src\\libs\\contextLib.js",[],"C:\\code\\lydia-client\\src\\containers\\NotFound.js",[],"C:\\code\\lydia-client\\src\\containers\\Home.js",[],"C:\\code\\lydia-client\\src\\containers\\Login.js",[],"C:\\code\\lydia-client\\src\\containers\\Settings.js",[],"C:\\code\\lydia-client\\src\\containers\\Signup.js",[],"C:\\code\\lydia-client\\src\\containers\\Account.js",[],"C:\\code\\lydia-client\\src\\containers\\Templates.js",["225","226"],"C:\\code\\lydia-client\\src\\containers\\ResetPassword.js",[],"C:\\code\\lydia-client\\src\\components\\UnauthenticatedRoute.js",[],"C:\\code\\lydia-client\\src\\components\\AuthenticatedRoute.js",[],"C:\\code\\lydia-client\\src\\components\\LoaderButton.js",[],"C:\\code\\lydia-client\\src\\libs\\hooksLib.js",[],"C:\\code\\lydia-client\\src\\libs\\utilities.js",[],"C:\\code\\lydia-client\\src\\components\\BillingForm.js",[],"C:\\code\\lydia-client\\src\\containers\\Template.js",["227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244"],"C:\\Code\\lydia-client\\src\\containers\\Template.js",[],"C:\\Code\\lydia-client\\src\\containers\\Accounts.js",[],"C:\\Code\\lydia-client\\src\\containers\\Transactions.js",["245"],"import React, { useState, useEffect } from \"react\"\r\nimport { Row, Col, Button, ButtonToolbar, ButtonGroup, Tabs, Tab} from \"react-bootstrap\"\r\nimport Moment from \"moment\"\r\nimport { calculate, deleteFutureAllTransactions, trim, archiveRebalance } from \"../libs/calculate\"\r\nimport { Storage } from \"aws-amplify\"\r\nimport { AgGridColumn, AgGridReact } from \"ag-grid-react\"\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\"\r\nimport \"ag-grid-community/dist/styles/ag-theme-bootstrap.css\"\r\nimport { useAppContext } from \"../libs/contextLib\"\r\nimport { onError } from \"../libs/errorLib\"\r\nimport { today, uuid, beginning } from \"../libs/utilities\"\r\nimport InterestPopUp from \"../components/InterestPopUp\"\r\nimport ArchivePopUp from \"../components/ArchivePopUp\"\r\nimport Summary from \"../components/Summary\"\r\nimport \"./Transactions.css\"\r\n\r\nconst Transactions = () => {\r\n  const { isAuthenticated, accounts, templates, transAcc, currentAccId, archive, recalcRequired, saveRequired, saveArchiveRequired,\r\n          setRecalcRequired, setTransAcc, setSaveArchiveRequired, setSaveRequired,\r\n          setArchive, setCurrentAccId } = useAppContext()\r\n  const [gridApi, setGridApi] = useState({})\r\n  const [interestAcc, setInterestAcc] = useState(false)\r\n  const [showInterest, setShowInterest] = useState(false)\r\n  const [showArchive, setShowArchive] = useState(false)\r\n  const [showTrim, setShowTrim] = useState(false)\r\n  const [archiveFile, setArchiveFile] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n\r\n      console.log('Transactions: useEffect')\r\n\r\n      if (!isAuthenticated) {\r\n        return\r\n      }\r\n\r\n      try {\r\n        if (!transAcc)\r\n          await handleLoad()\r\n        else\r\n        {\r\n          if (currentAccId)\r\n          {\r\n            const acc = transAcc.find(ta => ta.accountId === currentAccId)\r\n            if (acc) setInterestAcc(acc.interest)\r\n          }\r\n        }\r\n      } catch (e) {\r\n        onError(e)\r\n      }\r\n    }\r\n    onLoad()\r\n  }, [isAuthenticated, transAcc, currentAccId])\r\n\r\n  const amountFilterOptions = { \r\n    filterOptions: [\r\n      {\r\n        displayKey: 'equals',\r\n        displayName: 'Equals',\r\n        test: (filterValue, cellValue) => parseInt(cellValue, 10) / 100 === filterValue\r\n      },\r\n      {\r\n        displayKey: 'lessthan',\r\n        displayName: 'Less than',\r\n        test: (filterValue, cellValue) => parseInt(cellValue, 10) / 100 < filterValue\r\n      },\r\n      {\r\n        displayKey: 'greaterthan',\r\n        displayName: 'Greater than',\r\n        test: (filterValue, cellValue) => parseInt(cellValue, 10) / 100 > filterValue\r\n      }\r\n    ]\r\n  }\r\n\r\n  const balanceCellFormatter = params => params.value < 0 ? { color: \"red\" } : null\r\n\r\n  const amountParser = params => {\r\n    const val = Number(params.newValue)\r\n    if (isNaN(val)) return params.oldValue\r\n    return Math.round(val * 100)\r\n  }\r\n\r\n  const amountFormatter = params => {\r\n    const val = parseInt(params.value, 10) / 100\r\n    if (val) return val.toFixed(2)\r\n    return \"\"\r\n  }\r\n\r\n  const reconciledFormatter = params => String.fromCharCode(parseInt( params.value === 1 ? \"2713\" : params.value === 2 ? \"2705\" : \"0020\" ,16))\r\n\r\n  const reconciledCellStyle = params => ({paddingLeft:`${params.value === 1 ? 0.3 : 0}rem`, 'font-style':'normal', 'text-overflow':'clip'})\r\n\r\n  const balanceFormatter = params => (parseInt(params.value, 10) / 100).toFixed(2)\r\n\r\n  const dateFormatter = params => Moment(params.value).format(\"Do MMM YY\")\r\n\r\n  const dateFilterOptions = { \r\n    comparator: (filterLocalDateAtMidnight, cellValue) => {\r\n      const dateParts = cellValue.substring(0,10).split(\"-\")\r\n      const day = Number(dateParts[2])\r\n      const month = Number(dateParts[1]) - 1\r\n      const year = Number(dateParts[0])\r\n      const cellDate = new Date(year, month, day)\r\n      if (cellDate < filterLocalDateAtMidnight) return -1\r\n      else if (cellDate > filterLocalDateAtMidnight) return 1\r\n      else return 0\r\n    }\r\n  }\r\n\r\n  const getRowStyle = params => {\r\n    const rowStyle = {}\r\n    if (Moment(params.node.data.date).startOf(\"date\").isSameOrBefore(today, \"day\"))\r\n      rowStyle[\"background-color\"] = params.node.rowIndex % 2 === 0 ? \"#C3C3C3\" : \"#D3D3D3\"\r\n    if (params.node.rowIndex === 0) rowStyle[\"font-weight\"] = \"bold\"\r\n    if (!params.node.data.autogen) rowStyle[\"font-style\"] = \"italic\"\r\n    if (params.node.data.newRate) rowStyle[\"color\"] = \"#0000FF\"\r\n    return rowStyle\r\n  }\r\n\r\n  const rowEditable = node => node.data.transactionId !== 0 && ((Moment(node.data.date).isSameOrBefore(today, \"day\")) || (!node.data.autogen)) &&  (!node.data.newRate)\r\n \r\n  const onCellClicked = node => {\r\n    if (node.column.colId === \"reconciled\" && node.rowIndex > 0)\r\n      if (Moment(node.data.date).isSameOrBefore(today, \"day\")){\r\n        let localTransAcc = transAcc\r\n        const acc = localTransAcc.find(ta => ta.accountId === currentAccId)\r\n        const trans = acc.trans.find(t => t.transactionId === node.data.transactionId)\r\n        if (isNaN(trans.reconciled) || trans.reconciled === null ) trans.reconciled = 0\r\n        trans.reconciled++\r\n        if (trans.reconciled === 3) trans.reconciled = 0\r\n        node.data.reconciled = trans.reconciled\r\n        setTransAcc(localTransAcc)\r\n        if (archive) setSaveArchiveRequired(true)\r\n        else setSaveRequired(true)\r\n        gridApi[currentAccId].refreshCells()\r\n      }\r\n  }\r\n\r\n  const handleRecalculate = () => {\r\n    let localTransAcc\r\n    if (archive) {\r\n      localTransAcc = archiveRebalance( transAcc, today )\r\n      setSaveArchiveRequired(true)\r\n    }\r\n    else {\r\n      localTransAcc = calculate( accounts, templates, transAcc, today )\r\n       setSaveRequired(true)\r\n    }\r\n    setTransAcc(localTransAcc)\r\n    localTransAcc.forEach(account => insertDataIntoGrid(account,gridApi[account.accountId]))\r\n    setRecalcRequired(false)\r\n  }\r\n\r\n  const handleSave = () => {\r\n    let localTransAcc = deleteFutureAllTransactions(accounts, transAcc, today, false)\r\n    const key = \"data2.txt\"\r\n    let dataToSave = [accounts, templates, localTransAcc, today.format()]\r\n    let strToSave = JSON.stringify(dataToSave)\r\n    Storage.put(key, strToSave, {\r\n      level: \"private\",\r\n      contentType: \"application/json\"\r\n    })\r\n      .then(result => {setSaveRequired(false)\r\n      alert(\"Transactions saved successfully\")})\r\n      .catch(err => alert(err))\r\n  }\r\n\r\n  const handleLoad = async () => {\r\n    const key = \"data2.txt\"\r\n//   let key = \"Archive-2019-05-20.arc\"\r\n    let localTransAcc = []\r\n    // Storage.get(key, { level: \"private\", download: true })\r\n    //   .then(result => {\r\n    //     console.log(result.Body)\r\n    //     let res = new TextDecoder(\"utf-8\").decode(result.Body)\r\n    const data = await Storage.get(key, { level: \"private\", download: true })\r\n    data.Body.text().then( result => {\r\n        let dataToRestore = JSON.parse(result)\r\n        // Reconstruct data as of when it was saved including using the templates that existed then as well\r\n        // as the date at that time\r\n        localTransAcc = calculate(...dataToRestore)\r\n        // Now recalculate the data based on today's date and templates\r\n        localTransAcc = calculate( accounts, templates, localTransAcc, today )\r\n        selectAccount(currentAccId)\r\n        setTransAcc(localTransAcc)\r\n        localTransAcc.forEach(account => insertDataIntoGrid(account,gridApi[account.accountId]))\r\n        setSaveRequired(false)\r\n        setSaveArchiveRequired(false)\r\n        setRecalcRequired(false)\r\n        setArchive(false)\r\n      })\r\n      .catch(err => {\r\n        if (err.statusCode === 403) {\r\n          localTransAcc = calculate( accounts, templates, localTransAcc, today )\r\n          selectAccount(currentAccId)\r\n          setTransAcc(localTransAcc)\r\n          localTransAcc.forEach(account => insertDataIntoGrid(account,gridApi[account.accountId]))\r\n          setSaveRequired(false)\r\n          setSaveArchiveRequired(false)          \r\n          setRecalcRequired(false)\r\n          setArchive(false)\r\n        } else console.log(err)\r\n      })\r\n  }\r\n\r\n  const insertDataIntoGrid = (account,api) => {\r\n    let data =[]\r\n    if (account) {\r\n      let desc = \"Opening Balance\"\r\n      if (account.interest)\r\n        desc = `Int=${(account.starting.interest / 100).toFixed(2)} db=${account.starting.dbRate} cr=${account.starting.crRate}`\r\n      data = [\r\n        {\r\n          transactionId: 0,\r\n          date: account.starting.date,\r\n          description: desc,\r\n          balance: account.starting.balance\r\n        },\r\n        ...account.trans\r\n      ]\r\n    }\r\n    if (api) {\r\n      api.setRowData(data)\r\n      api.refreshCells()\r\n    }\r\n  }\r\n  \r\n  const insertDataIntoCurrentGrid = parmsTransAcc => {\r\n    const acc = parmsTransAcc.find(ta => ta.accountId === currentAccId)\r\n    insertDataIntoGrid( acc, gridApi[acc.accountId] ) \r\n  }\r\n\r\n  const handleDuplicate = () => {\r\n    const nodes = gridApi[currentAccId].getSelectedNodes()\r\n    if (nodes.length) {\r\n      const data = nodes[0].data\r\n      const newDate = Moment(data.date)\r\n\r\n      let newNode = {\r\n        date: newDate.format(\"YYYY-MM-DD\"),\r\n        sortKey: newDate.diff(beginning,'days'),\r\n        autogen: null,\r\n        type: \"manual\",\r\n        transactionId: uuid(),\r\n        dbAmount: data.dbAmount,\r\n        crAmount: data.crAmount,\r\n        crRate: data.crRate,\r\n        dbRate: data.dbRate,\r\n        periodInterest: data.periodInterest,\r\n        lineInterest: data.lineInterest,\r\n        description: data.description\r\n      }\r\n      let localTransAcc = transAcc\r\n      const acc = localTransAcc.find(ta => ta.accountId === currentAccId)\r\n      acc.trans.push(newNode)\r\n      localTransAcc = calculate( accounts, templates, localTransAcc, today )\r\n      setTransAcc(localTransAcc)\r\n      insertDataIntoCurrentGrid(localTransAcc)\r\n      setSaveRequired(true)\r\n      setRecalcRequired(false)\r\n    }\r\n  }\r\n  \r\n  const handleDelete = () => {\r\n    const nodes = gridApi[currentAccId].getSelectedNodes()\r\n    if (nodes.length) {\r\n      let localTransAcc = transAcc\r\n      let acc = localTransAcc.find(ta => ta.accountId === currentAccId)\r\n      let data = nodes[0].data\r\n      acc.trans = acc.trans.filter(t => t.transactionId !== data.transactionId)\r\n      nodes[0].setData(data)\r\n\r\n      localTransAcc = calculate( accounts, templates, localTransAcc, today )\r\n      setTransAcc(localTransAcc)\r\n      insertDataIntoCurrentGrid(localTransAcc)\r\n      setSaveRequired(true)\r\n      setRecalcRequired(false)\r\n    }\r\n  }\r\n\r\n  const handleManual = () => {\r\n    const nodes = gridApi[currentAccId].getSelectedNodes()\r\n    if (nodes.length) {\r\n      let localTransAcc = transAcc\r\n      let acc = localTransAcc.find(ta => ta.accountId === currentAccId)\r\n      let data = nodes[0].data\r\n      let transToUpdate = acc.trans.find(t => t.transactionId === data.transactionId )\r\n      data.autogen = null\r\n      transToUpdate.autogen = null\r\n      transToUpdate.type = \"manual\"\r\n      nodes[0].setData(data)\r\n      setTransAcc(localTransAcc)\r\n      setRecalcRequired(true)\r\n      setSaveRequired(true)\r\n      let params = { rowNodes: nodes }\r\n      gridApi[currentAccId].refreshCells(params)\r\n    }\r\n  }\r\n\r\n  const handleAdd = () => {\r\n    const newNode = {\r\n      date: today.format(\"YYYY-MM-DD\"),\r\n      sortKey: today.diff(beginning,'days'),\r\n      autogen: null,\r\n      type: \"manual\",\r\n      transactionId: uuid(),\r\n      dbAmount: 0,\r\n      crAmount: 0,\r\n      description: \"New Item\"\r\n    }\r\n    let localTransAcc = transAcc\r\n    const acc = localTransAcc.find(ta => ta.accountId === currentAccId)\r\n    acc.trans.push(newNode)\r\n    localTransAcc = calculate( accounts, templates, localTransAcc, today )\r\n    setTransAcc(localTransAcc)\r\n    insertDataIntoCurrentGrid(localTransAcc)\r\n    setSaveRequired(true)\r\n    setRecalcRequired(false)\r\n  }\r\n\r\n  const handleInterestCommit = (newRateValue, newRateCredit, intFirstAppliedDate) => {\r\n    const newRate = parseFloat(newRateValue).toFixed(2)\r\n    let desc\r\n    if (newRateCredit) desc = \" New credit rate: \" + newRate + \"%\"\r\n    else desc = \" New debit rate: \" + newRate + \"%\"\r\n    const newDate = Moment(intFirstAppliedDate)\r\n    const newNode = {\r\n      date: newDate.format(\"YYYY-MM-DD\"),\r\n      sortKey: newDate.diff(beginning,'days'),\r\n      autogen: null,\r\n      type: \"manual\",\r\n      transactionId: uuid(),\r\n      newRate: newRate / 100,\r\n      credit: newRateCredit,\r\n      description: desc,\r\n      dbAmount: 0,\r\n      crAmount: 0\r\n    }\r\n    let localTransAcc = transAcc\r\n    const acc = localTransAcc.find(ta => ta.accountId === currentAccId)\r\n    acc.trans.push(newNode)\r\n    localTransAcc = calculate( accounts, templates, localTransAcc, today )\r\n    setTransAcc(localTransAcc)\r\n    insertDataIntoCurrentGrid(localTransAcc)\r\n    setSaveRequired(true)\r\n    setRecalcRequired(false)\r\n    setShowInterest(false)\r\n  }\r\n\r\n  const handleTrimCommit = trimEndDate => {\r\n    const localTransAcc = transAcc\r\n    const trimDate = Moment(trimEndDate)\r\n    trim(localTransAcc, trimDate)\r\n    setTransAcc(localTransAcc)\r\n    localTransAcc.forEach(account => insertDataIntoGrid( account, gridApi[account.accountId]) )\r\n    setSaveRequired(true)\r\n    setRecalcRequired(true)\r\n    setShowTrim(false)\r\n  }\r\n\r\n  const handleArchiveLoad = () => {\r\n    const key = \"archive.json\"\r\n    let localTransAcc = []\r\n\r\n    Storage.get(key, { level: \"private\", download: true })\r\n      .then(result => {\r\n        const res = new TextDecoder(\"utf-8\").decode(result.Body)\r\n        const dataToRestore = JSON.parse(res)\r\n//        localTransAcc = deleteFutureAllTransactions(dataToRestore[0],dataToRestore[2],dataToRestore[3])\r\n        // console.log(dataToRestore)\r\n        if (!Array.isArray(dataToRestore[0])) {\r\n          // console.log('Ultra New archive format')\r\n          localTransAcc = dataToRestore\r\n        } else if ((dataToRestore).length === 4) {\r\n          // console.log('Old archive format')\r\n          localTransAcc = dataToRestore[2]\r\n//          setArchiveDate(dataToRestore[3])\r\n        } else if ((dataToRestore).length === 2) {\r\n          // console.log('New archive format')\r\n          localTransAcc = dataToRestore[0]\r\n//          setArchiveDate(dataToRestore[1])\r\n        } else console.log('Invalid archive format!')\r\n\r\n        setArchiveFile(key)\r\n        // let currentAccId = 0\r\n        // if (localTransAcc.length > 0) currentAccId = localTransAcc[0].accountId\r\n        setTransAcc(localTransAcc)\r\n        localTransAcc.forEach(account => insertDataIntoGrid( account, gridApi[account.accountId] ))\r\n        selectAccount(currentAccId)\r\n        setSaveRequired(false)\r\n        setSaveArchiveRequired(false)\r\n        setRecalcRequired(false)\r\n        setArchive(true)\r\n      })\r\n      .catch(err => {\r\n        if (err.statusCode === 403) alert(\"No archive found\")\r\n        else console.log(err)\r\n      })\r\n  }\r\n\r\n  const handleArchiveCommit = (archiveEndDate) => {\r\n    const endDate = Moment(archiveEndDate)\r\n    const archive = deleteFutureAllTransactions( accounts, transAcc, endDate, true )\r\n    //let key = `Archive-${endDate.format(\"YYYY-MM-DD\")}.arc`\r\n    const key = 'archive.json'\r\n    // setArchiveDate( endDate.format(\"YYYY-MM-DD\")\r\n    //const dataToSave = [accounts,[],archive,endDate.format()]\r\n    // const dataToSave = [archive,endDate.format(\"YYYY-MM-DD\")]\r\n    // const strToSave = JSON.stringify(dataToSave)\r\n    const strToSave = JSON.stringify(archive)\r\n    Storage.put(key, strToSave, {\r\n      level: \"private\",\r\n      contentType: \"application/json\"\r\n    })\r\n      .then(result => {\r\n        setSaveRequired(false)\r\n        setSaveArchiveRequired(false)\r\n        alert(\"Archive saved successfully\")\r\n    })\r\n      .catch(err => alert(err))\r\n    setShowArchive(false)\r\n  }\r\n\r\n  const handleArchiveSave = () => {\r\n    //const endDate = Moment(archiveDate)\r\n    const key = archiveFile\r\n    //const dataToSave = [transAcc,endDate.format(\"YYYY-MM-DD\")]\r\n    //const strToSave = JSON.stringify(dataToSave)\r\n    const strToSave = JSON.stringify(transAcc)\r\n    Storage.put(key, strToSave, {\r\n      level: \"private\",\r\n      contentType: \"application/json\"\r\n    })\r\n      .then(result => {\r\n        setSaveRequired(false)\r\n        setSaveArchiveRequired(false)\r\n        alert(\"Archive saved successfully\")\r\n    })\r\n      .catch(err => alert(err))\r\n  }\r\n\r\n  const updateRow = node => {\r\n    const localTransAcc = transAcc\r\n    const acc = localTransAcc.find(account => account.accountId === currentAccId)\r\n    const data = node.data\r\n    if (Moment(data.date).isAfter(today)) data.reconciled = 0\r\n    const transToUpdate = acc.trans.find(transaction => transaction.transactionId === data.transactionId)\r\n    transToUpdate.description = data.description\r\n    transToUpdate.date = data.date\r\n    transToUpdate.sortKey = Moment(data.date).diff(beginning,'days')\r\n    transToUpdate.reconciled = data.reconciled\r\n    transToUpdate.crAmount = data.crAmount\r\n    transToUpdate.dbAmount = data.dbAmount\r\n    setTransAcc(localTransAcc)\r\n    setRecalcRequired(true)\r\n    if (archive)\r\n      setSaveArchiveRequired(true)\r\n    else\r\n      setSaveRequired(true)\r\n    gridApi[currentAccId].refreshCells()\r\n  }\r\n\r\n  const selectAccount = eventKey => {\r\n    setCurrentAccId(eventKey)\r\n    let interestAcc = false\r\n    if (transAcc) {\r\n      const acc = transAcc.find(ta => ta.accountId === eventKey)\r\n      if (acc) interestAcc = acc.interest\r\n    }\r\n    setInterestAcc(interestAcc)\r\n  }\r\n\r\n  const h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0) - 280\r\n  const divStyle = { boxSizing: \"border-box\", height: `${h}px` }\r\n  const descriptionWidth = Math.min(Math.max(Math.max(document.documentElement.clientWidth, window.innerWidth || 0) - 1266,234),630)\r\n  const isSummary = currentAccId === \"0\"\r\n\r\n  const debug = true\r\n\r\n  return (\r\n    <div className=\"transactions\">\r\n      <h1>Transactions {archive ? \"- ARCHIVE\" : \"\"}</h1>\r\n      {transAcc && \r\n      <div>\r\n      <InterestPopUp\r\n        show={showInterest} \r\n        onHide={() => setShowInterest(false)} \r\n        onSubmit={handleInterestCommit} \r\n      />\r\n      <ArchivePopUp\r\n        show={showArchive}\r\n        type=\"Archive\"\r\n        onHide={() => setShowArchive(false)}\r\n        onSubmit={handleArchiveCommit}\r\n      />\r\n      <ArchivePopUp\r\n        show={showTrim}\r\n        type=\"Trim\"\r\n        onHide={() => setShowTrim(false)}\r\n        onSubmit={handleTrimCommit}\r\n      />        \r\n      <Tabs\r\n        defaultActiveKey={0}\r\n        transition={false}\r\n        id=\"trans-tab\"\r\n        activeKey={currentAccId}\r\n        onSelect={selectAccount}\r\n      >\r\n        <Tab key={0} eventKey={0} title=\"Summary\">\r\n          <Summary />\r\n        </Tab>\r\n        {transAcc\r\n          .filter(account => !account.hide)\r\n          .sort((a,b) => (a.sortOrder - b.sortOrder))\r\n          .map((ta) => (\r\n            <Tab key={ta.accountId} eventKey={ta.accountId} title={ta.accName}>\r\n              <div\r\n                id=\"transGrid\"\r\n                style={divStyle}\r\n                className=\"ag-theme-bootstrap\"\r\n              >\r\n                <AgGridReact\r\n                  defaultColDef={{\r\n                    resizable : true\r\n                  }}\r\n                  headerHeight={30}\r\n                  rowSelection=\"single\"\r\n                  rowBuffer={30}\r\n                  onCellEditingStopped={updateRow}\r\n                  onCellClicked={onCellClicked}\r\n                  rowDeselection={true}\r\n                  immutableData={true}\r\n                  getRowNodeId={data => data.transactionId}\r\n                  getRowStyle={getRowStyle}\r\n                  isRowSelectable={node => node.data.transactionId !== 0}\r\n                  onGridReady={params => {\r\n                    setGridApi({...gridApi,[ta.accountId]:params.api})\r\n                    let currAcc\r\n                    if (transAcc)\r\n                      currAcc = transAcc.find(y => y.accountId === ta.accountId)\r\n                    insertDataIntoGrid( currAcc, params.api)\r\n                  }}\r\n                >\r\n                  <AgGridColumn headerName=\"\" field=\"reconciled\" width={22} cellStyle={reconciledCellStyle} valueFormatter={reconciledFormatter} ></AgGridColumn>\r\n                  <AgGridColumn headerName=\"Date\" field=\"date\" width={110} filter=\"agDateColumnFilter\" filterParams={dateFilterOptions} cellStyle={{'textAlign':'right'}} valueFormatter={dateFormatter}></AgGridColumn>\r\n                  <AgGridColumn headerName=\"Description\" field=\"description\" width={descriptionWidth} editable={rowEditable} filter=\"agTextColumnFilter\" cellEditor=\"agTextCellEditor\"></AgGridColumn>\r\n                  <AgGridColumn headerName=\"Debit\" field=\"dbAmount\" width={110} editable={rowEditable} type=\"numericColumn\" valueParser={amountParser} valueFormatter={amountFormatter} filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} cellEditor=\"agTextCellEditor\" cellEditorParams={{ useFormatter: true }}></AgGridColumn>\r\n                  <AgGridColumn headerName=\"Credit\" field=\"crAmount\" width={110} editable={rowEditable} type=\"numericColumn\" valueParser={amountParser} valueFormatter={amountFormatter} filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} cellEditor=\"agTextCellEditor\" cellEditorParams={{ useFormatter: true }}></AgGridColumn>\r\n                  <AgGridColumn headerName=\"Balance\" field=\"balance\" width={115} type=\"numericColumn\" valueFormatter={balanceFormatter} filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} cellStyle={balanceCellFormatter}></AgGridColumn>\r\n                  <AgGridColumn headerName=\"cr\" field=\"crRate\" width={80} type=\"numericColumn\" filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} hide={!debug}></AgGridColumn>\r\n                  <AgGridColumn headerName=\"db\" field=\"dbRate\" width={80} type=\"numericColumn\" filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} hide={!debug}></AgGridColumn>\r\n                  <AgGridColumn headerName=\"period\" field=\"periodInterest\" width={110} type=\"numericColumn\" filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} hide={!debug}></AgGridColumn>\r\n                  <AgGridColumn headerName=\"Line\" field=\"lineInterest\" width={110} type=\"numericColumn\" filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} hide={!debug}></AgGridColumn>\r\n                </AgGridReact>\r\n              </div>\r\n            </Tab>\r\n          ))\r\n        }\r\n      </Tabs>\r\n      <Row>\r\n        <Col>\r\n          <ButtonToolbar id=\"buttons\" className=\"mb-2 float-right\">\r\n            <ButtonGroup className=\"mr-2\">\r\n              <Button variant=\"outline-secondary\" \r\n                      size=\"sm\" \r\n                      onClick={handleArchiveLoad}>\r\n                Load Archive\r\n              </Button>\r\n              <Button variant={saveArchiveRequired ? \"outline-warning\" : \"outline-secondary\"} \r\n                      size=\"sm\" \r\n                      onClick={archive ? handleArchiveSave : () => setShowArchive(true)}\r\n                      disabled={recalcRequired || saveRequired || isSummary }>\r\n                {archive ? \"Save\" : \"Archive\"}\r\n              </Button>\r\n              <Button variant=\"outline-secondary\" \r\n                      size=\"sm\" \r\n                      onClick={() => setShowTrim(true)}\r\n                      disabled={recalcRequired || saveRequired || archive || isSummary}>\r\n                Trim\r\n              </Button>\r\n              <Button variant=\"outline-secondary\" \r\n                      size=\"sm\"\r\n                      onClick={() => setShowInterest(true)}\r\n                      disabled={!interestAcc || archive}>\r\n                Interest\r\n              </Button>\r\n              <Button variant=\"outline-secondary\" \r\n                      size=\"sm\"\r\n                      onClick={handleAdd}\r\n                      disabled={archive || isSummary}>                \r\n                Add\r\n              </Button>\r\n              <Button variant=\"outline-secondary\" \r\n                      size=\"sm\" \r\n                      onClick={handleDuplicate}\r\n                      disabled={archive || isSummary}>\r\n                Duplicate\r\n              </Button>\r\n              <Button variant=\"outline-secondary\" \r\n                      size=\"sm\"\r\n                      onClick={handleDelete} \r\n                      disabled={archive || isSummary}>\r\n                Delete\r\n              </Button>\r\n              <Button variant=\"outline-secondary\" \r\n                      size=\"sm\"\r\n                      onClick={handleManual} \r\n                      disabled={archive || isSummary}>\r\n                Manual\r\n              </Button>\r\n              <Button variant=\"outline-secondary\" \r\n                      size=\"sm\"\r\n                      onClick={handleLoad}>\r\n                Load\r\n              </Button>\r\n              <Button variant={saveRequired ? \"warning\" : \"outline-secondary\"}\r\n                      size=\"sm\"\r\n                      onClick={handleSave}\r\n                      disabled={archive}>\r\n                Save\r\n              </Button>\r\n            </ButtonGroup>\r\n            <ButtonGroup>\r\n              <Button variant={recalcRequired ? \"warning\" : \"success\"}\r\n                      size=\"sm\"\r\n                      onClick={handleRecalculate}>\r\n                Recalculate\r\n              </Button>\r\n            </ButtonGroup>\r\n          </ButtonToolbar>\r\n        </Col>\r\n      </Row>\r\n      </div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Transactions","C:\\Code\\lydia-client\\src\\components\\Summary.js",[],"C:\\Code\\lydia-client\\src\\components\\ArchivePopUp.js",[],"C:\\Code\\lydia-client\\src\\components\\InterestPopUp.js",[],"C:\\Code\\lydia-client\\src\\libs\\calculate.js",[],"C:\\Code\\lydia-client\\src\\containers\\ChangePassword.js",[],"C:\\Code\\lydia-client\\src\\containers\\ChangeEmail.js",[],"C:\\Code\\lydia-client\\src\\components\\ConfirmationCode.js",[],{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","replacedBy":"249"},{"ruleId":"250","severity":1,"message":"251","line":58,"column":6,"nodeType":"252","endLine":58,"endColumn":26,"suggestions":"253"},{"ruleId":"254","severity":1,"message":"255","line":14,"column":11,"nodeType":"256","messageId":"257","endLine":14,"endColumn":31},{"ruleId":"254","severity":1,"message":"258","line":14,"column":33,"nodeType":"256","messageId":"257","endLine":14,"endColumn":48},{"ruleId":"254","severity":1,"message":"259","line":14,"column":50,"nodeType":"256","messageId":"257","endLine":14,"endColumn":66},{"ruleId":"250","severity":1,"message":"251","line":50,"column":6,"nodeType":"252","endLine":50,"endColumn":8,"suggestions":"260"},{"ruleId":"254","severity":1,"message":"261","line":17,"column":10,"nodeType":"256","messageId":"257","endLine":17,"endColumn":19},{"ruleId":"250","severity":1,"message":"262","line":48,"column":6,"nodeType":"252","endLine":48,"endColumn":23,"suggestions":"263"},{"ruleId":"254","severity":1,"message":"259","line":16,"column":11,"nodeType":"256","messageId":"257","endLine":16,"endColumn":27},{"ruleId":"254","severity":1,"message":"264","line":18,"column":9,"nodeType":"256","messageId":"257","endLine":18,"endColumn":16},{"ruleId":"254","severity":1,"message":"265","line":19,"column":10,"nodeType":"256","messageId":"257","endLine":19,"endColumn":18},{"ruleId":"254","severity":1,"message":"266","line":19,"column":20,"nodeType":"256","messageId":"257","endLine":19,"endColumn":31},{"ruleId":"254","severity":1,"message":"267","line":20,"column":20,"nodeType":"256","messageId":"257","endLine":20,"endColumn":31},{"ruleId":"254","severity":1,"message":"268","line":22,"column":22,"nodeType":"256","messageId":"257","endLine":22,"endColumn":35},{"ruleId":"254","severity":1,"message":"269","line":23,"column":10,"nodeType":"256","messageId":"257","endLine":23,"endColumn":19},{"ruleId":"254","severity":1,"message":"270","line":24,"column":10,"nodeType":"256","messageId":"257","endLine":24,"endColumn":17},{"ruleId":"254","severity":1,"message":"271","line":43,"column":138,"nodeType":"256","messageId":"257","endLine":43,"endColumn":148},{"ruleId":"254","severity":1,"message":"272","line":63,"column":9,"nodeType":"256","messageId":"257","endLine":63,"endColumn":21},{"ruleId":"254","severity":1,"message":"273","line":69,"column":9,"nodeType":"256","messageId":"257","endLine":69,"endColumn":30},{"ruleId":"254","severity":1,"message":"274","line":75,"column":9,"nodeType":"256","messageId":"257","endLine":75,"endColumn":25},{"ruleId":"254","severity":1,"message":"275","line":82,"column":9,"nodeType":"256","messageId":"257","endLine":82,"endColumn":30},{"ruleId":"254","severity":1,"message":"276","line":98,"column":9,"nodeType":"256","messageId":"257","endLine":98,"endColumn":28},{"ruleId":"254","severity":1,"message":"277","line":169,"column":9,"nodeType":"256","messageId":"257","endLine":169,"endColumn":23},{"ruleId":"254","severity":1,"message":"278","line":171,"column":9,"nodeType":"256","messageId":"257","endLine":171,"endColumn":21},{"ruleId":"254","severity":1,"message":"279","line":173,"column":9,"nodeType":"256","messageId":"257","endLine":173,"endColumn":23},{"ruleId":"254","severity":1,"message":"280","line":175,"column":9,"nodeType":"256","messageId":"257","endLine":175,"endColumn":20},{"ruleId":"250","severity":1,"message":"281","line":53,"column":6,"nodeType":"252","endLine":53,"endColumn":47,"suggestions":"282"},"no-native-reassign",["283"],"no-negated-in-lhs",["284"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'refreshAccounts' and 'refreshTemplates'. Either include them or remove the dependency array.","ArrayExpression",["285"],"no-unused-vars","'userHasAuthenticated' is assigned a value but never used.","Identifier","unusedVar","'refreshAccounts' is assigned a value but never used.","'refreshTemplates' is assigned a value but never used.",["286"],"'isLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'accounts' and 'templates'. Either include them or remove the dependency array.",["287"],"'history' is assigned a value but never used.","'interest' is assigned a value but never used.","'setInterest' is assigned a value but never used.","'setIsSaving' is assigned a value but never used.","'setIsDeleting' is assigned a value but never used.","'startDate' is assigned a value but never used.","'endDate' is assigned a value but never used.","'templateId' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'handleInflationChange' is assigned a value but never used.","'handleTypeChange' is assigned a value but never used.","'handleStartDateChange' is assigned a value but never used.","'handleEndDateChange' is assigned a value but never used.","'createTemplate' is assigned a value but never used.","'saveTemplate' is assigned a value but never used.","'deleteTemplate' is assigned a value but never used.","'handleFocus' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleLoad'. Either include it or remove the dependency array.",["288"],"no-global-assign","no-unsafe-negation",{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},"Update the dependencies array to be: [refreshAccounts, refreshTemplates, stateToBeRefreshed]",{"range":"297","text":"298"},"Update the dependencies array to be: [refreshAccounts, refreshTemplates]",{"range":"299","text":"300"},"Update the dependencies array to be: [accounts, isAuthenticated, templates]",{"range":"301","text":"302"},"Update the dependencies array to be: [isAuthenticated, transAcc, currentAccId, handleLoad]",{"range":"303","text":"304"},[2150,2170],"[refreshAccounts, refreshTemplates, stateToBeRefreshed]",[1714,1716],"[refreshAccounts, refreshTemplates]",[1755,1772],"[accounts, isAuthenticated, templates]",[1986,2027],"[isAuthenticated, transAcc, currentAccId, handleLoad]"]