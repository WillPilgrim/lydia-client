[{"C:\\Code\\lydia-client\\src\\index.js":"1","C:\\Code\\lydia-client\\src\\registerServiceWorker.js":"2","C:\\Code\\lydia-client\\src\\App.js":"3","C:\\Code\\lydia-client\\src\\config.js":"4","C:\\Code\\lydia-client\\src\\Routes.js":"5","C:\\Code\\lydia-client\\src\\containers\\Home.js":"6","C:\\Code\\lydia-client\\src\\containers\\Signup.js":"7","C:\\Code\\lydia-client\\src\\containers\\Login.js":"8","C:\\Code\\lydia-client\\src\\containers\\NotFound.js":"9","C:\\Code\\lydia-client\\src\\containers\\Settings.js":"10","C:\\Code\\lydia-client\\src\\components\\AuthenticatedRoute.js":"11","C:\\Code\\lydia-client\\src\\components\\UnauthenticatedRoute.js":"12","C:\\Code\\lydia-client\\src\\components\\LoaderButton.js":"13","C:\\Code\\lydia-client\\src\\components\\BillingForm.js":"14","C:\\Code\\lydia-client\\src\\containers\\Account.js":"15","C:\\Code\\lydia-client\\src\\libs\\utilities.js":"16","C:\\Code\\lydia-client\\src\\containers\\ResetPassword.js":"17","C:\\Code\\lydia-client\\src\\containers\\Templates.js":"18","C:\\code\\lydia-client\\src\\index.js":"19","C:\\code\\lydia-client\\src\\App.js":"20","C:\\code\\lydia-client\\src\\registerServiceWorker.js":"21","C:\\code\\lydia-client\\src\\config.js":"22","C:\\code\\lydia-client\\src\\Routes.js":"23","C:\\code\\lydia-client\\src\\containers\\NotFound.js":"24","C:\\code\\lydia-client\\src\\containers\\Home.js":"25","C:\\code\\lydia-client\\src\\containers\\Login.js":"26","C:\\code\\lydia-client\\src\\containers\\Settings.js":"27","C:\\code\\lydia-client\\src\\containers\\Signup.js":"28","C:\\code\\lydia-client\\src\\containers\\Account.js":"29","C:\\code\\lydia-client\\src\\containers\\Templates.js":"30","C:\\code\\lydia-client\\src\\containers\\ResetPassword.js":"31","C:\\code\\lydia-client\\src\\components\\UnauthenticatedRoute.js":"32","C:\\code\\lydia-client\\src\\components\\AuthenticatedRoute.js":"33","C:\\code\\lydia-client\\src\\components\\LoaderButton.js":"34","C:\\code\\lydia-client\\src\\libs\\utilities.js":"35","C:\\code\\lydia-client\\src\\components\\BillingForm.js":"36","C:\\code\\lydia-client\\src\\containers\\Template.js":"37","C:\\Code\\lydia-client\\src\\containers\\Template.js":"38","C:\\Code\\lydia-client\\src\\containers\\Accounts.js":"39","C:\\Code\\lydia-client\\src\\containers\\Transactions.js":"40","C:\\Code\\lydia-client\\src\\components\\Summary.js":"41","C:\\Code\\lydia-client\\src\\components\\ArchivePopUp.js":"42","C:\\Code\\lydia-client\\src\\components\\InterestPopUp.js":"43","C:\\Code\\lydia-client\\src\\libs\\calculate.js":"44","C:\\Code\\lydia-client\\src\\containers\\ChangePassword.js":"45","C:\\Code\\lydia-client\\src\\containers\\ChangeEmail.js":"46","C:\\code\\lydia-client\\src\\containers\\ChangePassword.js":"47","C:\\code\\lydia-client\\src\\containers\\ChangeEmail.js":"48","C:\\code\\lydia-client\\src\\containers\\Accounts.js":"49","C:\\code\\lydia-client\\src\\containers\\Transactions.js":"50","C:\\code\\lydia-client\\src\\components\\Summary.js":"51","C:\\code\\lydia-client\\src\\components\\ArchivePopUp.js":"52","C:\\code\\lydia-client\\src\\components\\InterestPopUp.js":"53","C:\\code\\lydia-client\\src\\libs\\calculate.js":"54","C:\\Code\\lydia-client\\src\\components\\AppliedRoute.js":"55","C:\\Code\\lydia-client\\src\\libs\\contextLib.js":"56","C:\\Code\\lydia-client\\src\\libs\\errorLib.js":"57","C:\\Code\\lydia-client\\src\\containers\\Help.js":"58","C:\\Code\\lydia-client\\src\\components\\Contact.js":"59","C:\\Code\\lydia-client\\src\\libs\\hooksLib.js":"60","C:\\Code\\lydia-client\\src\\components\\ConfirmationCode.js":"61","C:\\Code\\lydia-client\\src\\components\\Confirm.js":"62"},{"size":1038,"mtime":1611645569419,"results":"63","hashOfConfig":"64"},{"size":4501,"mtime":1585326586609,"results":"65","hashOfConfig":"64"},{"size":6404,"mtime":1611645569397,"results":"66","hashOfConfig":"64"},{"size":1202,"mtime":1611645569405,"results":"67","hashOfConfig":"64"},{"size":2263,"mtime":1611645569397,"results":"68","hashOfConfig":"64"},{"size":6878,"mtime":1611646615921,"results":"69","hashOfConfig":"64"},{"size":3984,"mtime":1611645569415,"results":"70","hashOfConfig":"64"},{"size":5140,"mtime":1611645569412,"results":"71","hashOfConfig":"64"},{"size":192,"mtime":1611645569413,"results":"72","hashOfConfig":"64"},{"size":2182,"mtime":1611645569414,"results":"73","hashOfConfig":"64"},{"size":545,"mtime":1611645569398,"results":"74","hashOfConfig":"64"},{"size":890,"mtime":1611645569404,"results":"75","hashOfConfig":"64"},{"size":474,"mtime":1611645569403,"results":"76","hashOfConfig":"64"},{"size":2303,"mtime":1611645569399,"results":"77","hashOfConfig":"64"},{"size":15087,"mtime":1611645569406,"results":"78","hashOfConfig":"64"},{"size":1487,"mtime":1611645569423,"results":"79","hashOfConfig":"64"},{"size":5057,"mtime":1611645569413,"results":"80","hashOfConfig":"64"},{"size":7056,"mtime":1611645569417,"results":"81","hashOfConfig":"64"},{"size":1038,"mtime":1609724119811,"results":"82","hashOfConfig":"83"},{"size":5875,"mtime":1610612879326,"results":"84","hashOfConfig":"83"},{"size":4501,"mtime":1561692682965,"results":"85","hashOfConfig":"83"},{"size":1202,"mtime":1609724119779,"results":"86","hashOfConfig":"83"},{"size":2163,"mtime":1610334834326,"results":"87","hashOfConfig":"83"},{"size":192,"mtime":1609724119796,"results":"88","hashOfConfig":"83"},{"size":4436,"mtime":1609724119789,"results":"89","hashOfConfig":"83"},{"size":3406,"mtime":1610612841533,"results":"90","hashOfConfig":"83"},{"size":2140,"mtime":1609724119800,"results":"91","hashOfConfig":"83"},{"size":3286,"mtime":1610614092647,"results":"92","hashOfConfig":"83"},{"size":15081,"mtime":1610612233040,"results":"93","hashOfConfig":"83"},{"size":7050,"mtime":1610334834358,"results":"94","hashOfConfig":"83"},{"size":4133,"mtime":1610334834353,"results":"95","hashOfConfig":"83"},{"size":890,"mtime":1609724119778,"results":"96","hashOfConfig":"83"},{"size":545,"mtime":1609724119771,"results":"97","hashOfConfig":"83"},{"size":474,"mtime":1609724119777,"results":"98","hashOfConfig":"83"},{"size":1487,"mtime":1610612233064,"results":"99","hashOfConfig":"83"},{"size":2303,"mtime":1609724119773,"results":"100","hashOfConfig":"83"},{"size":16132,"mtime":1610612233051,"results":"101","hashOfConfig":"83"},{"size":16482,"mtime":1611645569416,"results":"102","hashOfConfig":"64"},{"size":8453,"mtime":1611645569407,"results":"103","hashOfConfig":"64"},{"size":31062,"mtime":1613646470565,"results":"104","hashOfConfig":"64"},{"size":2647,"mtime":1611645569404,"results":"105","hashOfConfig":"64"},{"size":2731,"mtime":1611645569398,"results":"106","hashOfConfig":"64"},{"size":3806,"mtime":1611645569402,"results":"107","hashOfConfig":"64"},{"size":31231,"mtime":1611645569421,"results":"108","hashOfConfig":"64"},{"size":2421,"mtime":1611645569408,"results":"109","hashOfConfig":"64"},{"size":2944,"mtime":1611645569408,"results":"110","hashOfConfig":"64"},{"size":2421,"mtime":1610334834348,"results":"111","hashOfConfig":"83"},{"size":2310,"mtime":1610614567680,"results":"112","hashOfConfig":"83"},{"size":8447,"mtime":1610612233045,"results":"113","hashOfConfig":"83"},{"size":25450,"mtime":1610612233054,"results":"114","hashOfConfig":"83"},{"size":2617,"mtime":1610334834334,"results":"115","hashOfConfig":"83"},{"size":2731,"mtime":1610334834327,"results":"116","hashOfConfig":"83"},{"size":3806,"mtime":1610612233038,"results":"117","hashOfConfig":"83"},{"size":31231,"mtime":1610612233061,"results":"118","hashOfConfig":"83"},{"size":206,"mtime":1585326586598,"results":"119","hashOfConfig":"120"},{"size":159,"mtime":1611645569421,"results":"121","hashOfConfig":"64"},{"size":203,"mtime":1611645569422,"results":"122","hashOfConfig":"64"},{"size":9572,"mtime":1611645569410,"results":"123","hashOfConfig":"64"},{"size":3633,"mtime":1613647549022,"results":"124","hashOfConfig":"64"},{"size":313,"mtime":1611645569423,"results":"125","hashOfConfig":"64"},{"size":1175,"mtime":1611645569400,"results":"126","hashOfConfig":"64"},{"size":1258,"mtime":1611645569399,"results":"127","hashOfConfig":"64"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14qstvp",{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},"gsccot",{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"qqq7rg",{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Code\\lydia-client\\src\\index.js",[],"C:\\Code\\lydia-client\\src\\registerServiceWorker.js",[],"C:\\Code\\lydia-client\\src\\App.js",["254"],"C:\\Code\\lydia-client\\src\\config.js",[],"C:\\Code\\lydia-client\\src\\Routes.js",[],"C:\\Code\\lydia-client\\src\\containers\\Home.js",[],"C:\\Code\\lydia-client\\src\\containers\\Signup.js",[],"C:\\Code\\lydia-client\\src\\containers\\Login.js",[],"C:\\Code\\lydia-client\\src\\containers\\NotFound.js",[],"C:\\Code\\lydia-client\\src\\containers\\Settings.js",[],"C:\\Code\\lydia-client\\src\\components\\AuthenticatedRoute.js",[],"C:\\Code\\lydia-client\\src\\components\\UnauthenticatedRoute.js",[],"C:\\Code\\lydia-client\\src\\components\\LoaderButton.js",[],"C:\\Code\\lydia-client\\src\\components\\BillingForm.js",[],"C:\\Code\\lydia-client\\src\\containers\\Account.js",[],"C:\\Code\\lydia-client\\src\\libs\\utilities.js",[],"C:\\Code\\lydia-client\\src\\containers\\ResetPassword.js",[],"C:\\Code\\lydia-client\\src\\containers\\Templates.js",[],"C:\\code\\lydia-client\\src\\index.js",[],["255","256"],"C:\\code\\lydia-client\\src\\App.js",["257"],"C:\\code\\lydia-client\\src\\registerServiceWorker.js",[],"C:\\code\\lydia-client\\src\\config.js",[],"C:\\code\\lydia-client\\src\\Routes.js",[],"C:\\code\\lydia-client\\src\\containers\\NotFound.js",[],"C:\\code\\lydia-client\\src\\containers\\Home.js",[],"C:\\code\\lydia-client\\src\\containers\\Login.js",[],"C:\\code\\lydia-client\\src\\containers\\Settings.js",[],"C:\\code\\lydia-client\\src\\containers\\Signup.js",[],"C:\\code\\lydia-client\\src\\containers\\Account.js",[],"C:\\code\\lydia-client\\src\\containers\\Templates.js",[],"C:\\code\\lydia-client\\src\\containers\\ResetPassword.js",[],"C:\\code\\lydia-client\\src\\components\\UnauthenticatedRoute.js",[],"C:\\code\\lydia-client\\src\\components\\AuthenticatedRoute.js",[],"C:\\code\\lydia-client\\src\\components\\LoaderButton.js",[],"C:\\code\\lydia-client\\src\\libs\\utilities.js",[],"C:\\code\\lydia-client\\src\\components\\BillingForm.js",[],"C:\\code\\lydia-client\\src\\containers\\Template.js",[],"C:\\Code\\lydia-client\\src\\containers\\Template.js",[],"C:\\Code\\lydia-client\\src\\containers\\Accounts.js",[],"C:\\Code\\lydia-client\\src\\containers\\Transactions.js",["258"],"import React, { useState, useEffect } from \"react\"\r\nimport { Row, Col, Button, ButtonToolbar, ButtonGroup, Tabs, Tab } from \"react-bootstrap\"\r\nimport Moment from \"moment\"\r\nimport { calculate, deleteFutureAllTransactions, trim, archiveRebalance } from \"../libs/calculate\"\r\nimport { Storage } from \"aws-amplify\"\r\nimport { AgGridColumn, AgGridReact } from \"ag-grid-react\"\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\"\r\nimport \"ag-grid-community/dist/styles/ag-theme-bootstrap.css\"\r\nimport { useAppContext } from \"../libs/contextLib\"\r\nimport { onError } from \"../libs/errorLib\"\r\nimport { today, uuid, beginning } from \"../libs/utilities\"\r\nimport InterestPopUp from \"../components/InterestPopUp\"\r\nimport ArchivePopUp from \"../components/ArchivePopUp\"\r\nimport Summary from \"../components/Summary\"\r\nimport Confirm from \"../components/Confirm\"\r\nimport \"./Transactions.css\"\r\n\r\nconst Transactions = () => {\r\n    const { isAuthenticated, accounts, templates, transAcc, currentAccId, archive, recalcRequired, saveRequired, saveArchiveRequired,\r\n        setRecalcRequired, setTransAcc, setSaveArchiveRequired, setSaveRequired,\r\n        setArchive, setCurrentAccId } = useAppContext()\r\n    const [gridApi, setGridApi] = useState({})\r\n    const [interestAcc, setInterestAcc] = useState(false)\r\n    const [showInterest, setShowInterest] = useState(false)\r\n    const [showArchive, setShowArchive] = useState(false)\r\n    const [showTrim, setShowTrim] = useState(false)\r\n    const [archiveFile, setArchiveFile] = useState(null)\r\n    const [showConfirm, setShowConfirm] = useState(false)\r\n    const [confirmTitle, setConfirmTitle] = useState(\"\")\r\n    const [confirmBody, setConfirmBody] = useState(\"\")\r\n    const [confirmSubmit, setConfirmSubmit] = useState(null)\r\n    const [showCancelButton, setShowCancelButton] = useState(false)\r\n\r\n    useEffect(() => {\r\n        console.log('Transactions: useEffect')\r\n\r\n        const onLoad = async () => {\r\n            if (!isAuthenticated) {\r\n                return\r\n            }\r\n\r\n            try {\r\n                if (!transAcc)\r\n                    await restoreData()\r\n                else {\r\n                    if (currentAccId) {\r\n                        const acc = transAcc.find(ta => ta.accountId === currentAccId)\r\n                        if (acc) setInterestAcc(acc.interest)\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                onError(e)\r\n            }\r\n        }\r\n        onLoad()\r\n    }, [isAuthenticated, transAcc, currentAccId])\r\n\r\n    const amountFilterOptions = {\r\n        filterOptions: [\r\n            {\r\n                displayKey: 'equals',\r\n                displayName: 'Equals',\r\n                test: (filterValue, cellValue) => parseInt(cellValue, 10) / 100 === filterValue\r\n            },\r\n            {\r\n                displayKey: 'lessthan',\r\n                displayName: 'Less than',\r\n                test: (filterValue, cellValue) => parseInt(cellValue, 10) / 100 < filterValue\r\n            },\r\n            {\r\n                displayKey: 'greaterthan',\r\n                displayName: 'Greater than',\r\n                test: (filterValue, cellValue) => parseInt(cellValue, 10) / 100 > filterValue\r\n            }\r\n        ]\r\n    }\r\n\r\n    const balanceCellFormatter = params => params.value < 0 ? { color: \"red\" } : null\r\n\r\n    const amountParser = params => {\r\n        const val = Number(params.newValue)\r\n        if (isNaN(val)) return params.oldValue\r\n        return Math.round(val * 100)\r\n    }\r\n\r\n    const amountFormatter = params => {\r\n        const val = parseInt(params.value, 10) / 100\r\n        if (val) return val.toFixed(2)\r\n        return \"\"\r\n    }\r\n\r\n    const reconciledFormatter = params => String.fromCharCode(parseInt(params.value === 1 ? \"2713\" : params.value === 2 ? \"2705\" : \"0020\", 16))\r\n\r\n    const reconciledCellStyle = params => ({ paddingLeft: `${params.value === 1 ? 0.3 : 0}rem`, 'font-style': 'normal', 'text-overflow': 'clip' })\r\n\r\n    const balanceFormatter = params => (parseInt(params.value, 10) / 100).toFixed(2)\r\n\r\n    const dateFormatter = params => Moment(params.value).format(\"Do MMM YY\")\r\n\r\n    const dateFilterOptions = {\r\n        comparator: (filterLocalDateAtMidnight, cellValue) => {\r\n            const dateParts = cellValue.substring(0, 10).split(\"-\")\r\n            const day = Number(dateParts[2])\r\n            const month = Number(dateParts[1]) - 1\r\n            const year = Number(dateParts[0])\r\n            const cellDate = new Date(year, month, day)\r\n            if (cellDate < filterLocalDateAtMidnight) return -1\r\n            else if (cellDate > filterLocalDateAtMidnight) return 1\r\n            else return 0\r\n        }\r\n    }\r\n\r\n    const getRowStyle = params => {\r\n        const rowStyle = {}\r\n        if (Moment(params.node.data.date).startOf(\"date\").isSameOrBefore(today, \"day\"))\r\n            rowStyle[\"background-color\"] = params.node.rowIndex % 2 === 0 ? \"#C3C3C3\" : \"#D3D3D3\"\r\n        if (params.node.rowIndex === 0) rowStyle[\"font-weight\"] = \"bold\"\r\n        if (!params.node.data.autogen) rowStyle[\"font-style\"] = \"italic\"\r\n        if (params.node.data.newRate) rowStyle[\"color\"] = \"#0000FF\"\r\n        return rowStyle\r\n    }\r\n\r\n    const rowEditable = node => node.data.transactionId !== 0 && ((Moment(node.data.date).isSameOrBefore(today, \"day\")) || (!node.data.autogen)) && (!node.data.newRate)\r\n\r\n    const onCellClicked = node => {\r\n        if (node.column.colId === \"reconciled\" && node.rowIndex > 0)\r\n            if (Moment(node.data.date).isSameOrBefore(today, \"day\")) {\r\n                const localTransAcc = transAcc\r\n                const acc = localTransAcc.find(ta => ta.accountId === currentAccId)\r\n                const trans = acc.trans.find(t => t.transactionId === node.data.transactionId)\r\n                if (isNaN(trans.reconciled) || trans.reconciled === null) trans.reconciled = 0\r\n                trans.reconciled++\r\n                if (trans.reconciled === 3) trans.reconciled = 0\r\n                node.data.reconciled = trans.reconciled\r\n                setTransAcc(localTransAcc)\r\n                if (archive) setSaveArchiveRequired(true)\r\n                else setSaveRequired(true)\r\n                gridApi[currentAccId].refreshCells()\r\n            }\r\n    }\r\n\r\n    const handleRecalculate = () => {\r\n        let localTransAcc\r\n        if (archive) {\r\n            localTransAcc = archiveRebalance(transAcc, today)\r\n            setSaveArchiveRequired(true)\r\n        }\r\n        else {\r\n            localTransAcc = calculate(accounts, templates, transAcc, today)\r\n            setSaveRequired(true)\r\n        }\r\n        setTransAcc(localTransAcc)\r\n        localTransAcc.forEach(account => insertDataIntoGrid(account, gridApi[account.accountId]))\r\n        setRecalcRequired(false)\r\n    }\r\n\r\n    const handleSave = async () => {\r\n        const key = \"data2.txt\"   // need to change this!\r\n        const localTransAcc = deleteFutureAllTransactions(accounts, transAcc, today, false)\r\n        const strToSave = JSON.stringify([accounts, templates, localTransAcc, today.format()])\r\n        try {\r\n            await Storage.put(key, strToSave, { level: \"private\", contentType: \"application/json\" })\r\n            setSaveRequired(false)\r\n            showSavedAlert(\"Transactions\")\r\n        }\r\n        catch (e) {\r\n            onError(e)\r\n        }\r\n    }\r\n\r\n    const restoreData = async () => {\r\n        const key = \"data2.txt\"  // need to change this!\r\n        try {\r\n            const data = await Storage.get(key, { level: \"private\", download: true, cacheControl: 'no-cache' })\r\n            if (!data)\r\n                alert('No transaction data found - without explicit error')\r\n            else if (!data.Body)\r\n                alert('No data body found - without explicit error')\r\n            else {\r\n                const result = await data.Body.text()\r\n                const dataToRestore = JSON.parse(result)\r\n                // Reconstruct data as of when it was saved including using the templates that existed then as well\r\n                // as the date at that time\r\n                let localTransAcc = calculate(...dataToRestore)\r\n                // Now recalculate the data based on today's date and templates\r\n                localTransAcc = calculate(accounts, templates, localTransAcc, today)\r\n                selectAccount(currentAccId)\r\n                setTransAcc(localTransAcc)\r\n                localTransAcc.forEach(account => insertDataIntoGrid(account, gridApi[account.accountId]))\r\n                setSaveRequired(false)\r\n                setSaveArchiveRequired(false)\r\n                setRecalcRequired(false)\r\n                setArchive(false)\r\n            }\r\n        }\r\n        catch (e) {\r\n            if (e.response.status === 403) {\r\n                const localTransAcc = calculate(accounts, templates, [], today)\r\n                setTransAcc(localTransAcc)\r\n                localTransAcc.forEach(account => insertDataIntoGrid(account, gridApi[account.accountId]))\r\n                setSaveRequired(false)\r\n                setSaveArchiveRequired(false)\r\n                setRecalcRequired(false)\r\n                setArchive(false)\r\n                selectAccount(\"0\")\r\n            } else\r\n                onError(e)\r\n        }\r\n    }\r\n\r\n    const confirmLoad = async () => {\r\n        await restoreData()\r\n        setShowConfirm(false)\r\n    }\r\n\r\n    const handleLoad = async () => {\r\n            setConfirmTitle(\"Load Transactions\")\r\n            setConfirmBody(\"Are you sure you want to restore the data to the last save point?\")\r\n            setConfirmSubmit(() => confirmLoad)\r\n            setShowCancelButton(true)\r\n            setShowConfirm(true)\r\n    }\r\n\r\n    const insertDataIntoGrid = (account, api) => {\r\n        let data = []\r\n        if (account) {\r\n            const desc = !account.interest ? \"Opening Balance\" :\r\n                `Int=${(account.starting.interest / 100).toFixed(2)} db=${account.starting.dbRate} cr=${account.starting.crRate}`\r\n            data = [\r\n                {\r\n                    transactionId: 0,\r\n                    date: account.starting.date,\r\n                    description: desc,\r\n                    balance: account.starting.balance\r\n                },\r\n                ...account.trans\r\n            ]\r\n        }\r\n        if (api) {\r\n            api.setRowData(data)\r\n            api.refreshCells()\r\n        }\r\n    }\r\n\r\n    const insertDataIntoCurrentGrid = parmsTransAcc => {\r\n        const acc = parmsTransAcc.find(ta => ta.accountId === currentAccId)\r\n        insertDataIntoGrid(acc, gridApi[acc.accountId])\r\n    }\r\n\r\n    const handleDuplicate = () => {\r\n        const nodes = gridApi[currentAccId].getSelectedNodes()\r\n        if (nodes.length) {\r\n            const data = nodes[0].data\r\n            const newDate = Moment(data.date)\r\n            const newNode = {\r\n                date: newDate.format(\"YYYY-MM-DD\"),\r\n                sortKey: newDate.diff(beginning, 'days'),\r\n                autogen: null,\r\n                type: \"manual\",\r\n                transactionId: uuid(),\r\n                dbAmount: data.dbAmount,\r\n                crAmount: data.crAmount,\r\n                crRate: data.crRate,\r\n                dbRate: data.dbRate,\r\n                periodInterest: data.periodInterest,\r\n                lineInterest: data.lineInterest,\r\n                description: data.description\r\n            }\r\n            let localTransAcc = transAcc\r\n            const acc = localTransAcc.find(ta => ta.accountId === currentAccId)\r\n            acc.trans.push(newNode)\r\n            localTransAcc = calculate(accounts, templates, localTransAcc, today)\r\n            setTransAcc(localTransAcc)\r\n            insertDataIntoCurrentGrid(localTransAcc)\r\n            setSaveRequired(true)\r\n            setRecalcRequired(false)\r\n        }\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        const nodes = gridApi[currentAccId].getSelectedNodes()\r\n        if (nodes.length) {\r\n            let localTransAcc = transAcc\r\n            const acc = localTransAcc.find(ta => ta.accountId === currentAccId)\r\n            acc.trans = acc.trans.filter(t => t.transactionId !== nodes[0].transactionId)\r\n\r\n            localTransAcc = calculate(accounts, templates, localTransAcc, today)\r\n            setTransAcc(localTransAcc)\r\n            insertDataIntoCurrentGrid(localTransAcc)\r\n            setSaveRequired(true)\r\n            setRecalcRequired(false)\r\n        }\r\n    }\r\n\r\n    const handleManual = () => {\r\n        const nodes = gridApi[currentAccId].getSelectedNodes()\r\n        if (nodes.length) {\r\n            const localTransAcc = transAcc\r\n            const acc = localTransAcc.find(ta => ta.accountId === currentAccId)\r\n            const data = nodes[0].data\r\n            const transToUpdate = acc.trans.find(t => t.transactionId === data.transactionId)\r\n            data.autogen = null\r\n            transToUpdate.autogen = null\r\n            transToUpdate.type = \"manual\"\r\n            nodes[0].setData(data)\r\n            setTransAcc(localTransAcc)\r\n            setRecalcRequired(true)\r\n            setSaveRequired(true)\r\n            gridApi[currentAccId].refreshCells({ rowNodes: nodes })\r\n        }\r\n    }\r\n\r\n    const handleAdd = () => {\r\n        const newNode = {\r\n            date: today.format(\"YYYY-MM-DD\"),\r\n            sortKey: today.diff(beginning, 'days'),\r\n            autogen: null,\r\n            type: \"manual\",\r\n            transactionId: uuid(),\r\n            dbAmount: 0,\r\n            crAmount: 0,\r\n            description: \"New Item\"\r\n        }\r\n        let localTransAcc = transAcc\r\n        const acc = localTransAcc.find(ta => ta.accountId === currentAccId)\r\n        acc.trans.push(newNode)\r\n        localTransAcc = calculate(accounts, templates, localTransAcc, today)\r\n        setTransAcc(localTransAcc)\r\n        insertDataIntoCurrentGrid(localTransAcc)\r\n        setSaveRequired(true)\r\n        setRecalcRequired(false)\r\n    }\r\n\r\n    const handleInterestCommit = (newRateValue, newRateCredit, intFirstAppliedDate) => {\r\n        const newRate = parseFloat(newRateValue).toFixed(2)\r\n        const desc = ` New ${newRateCredit ? \"credit\" : \"debit\"} rate: ${newRate}%`\r\n        const newDate = Moment(intFirstAppliedDate)\r\n        const newNode = {\r\n            date: newDate.format(\"YYYY-MM-DD\"),\r\n            sortKey: newDate.diff(beginning, 'days'),\r\n            autogen: null,\r\n            type: \"manual\",\r\n            transactionId: uuid(),\r\n            newRate: newRate / 100,\r\n            credit: newRateCredit,\r\n            description: desc,\r\n            dbAmount: 0,\r\n            crAmount: 0\r\n        }\r\n        let localTransAcc = transAcc\r\n        const acc = localTransAcc.find(ta => ta.accountId === currentAccId)\r\n        acc.trans.push(newNode)\r\n        localTransAcc = calculate(accounts, templates, localTransAcc, today)\r\n        setTransAcc(localTransAcc)\r\n        insertDataIntoCurrentGrid(localTransAcc)\r\n        setSaveRequired(true)\r\n        setRecalcRequired(false)\r\n        setShowInterest(false)\r\n    }\r\n\r\n    const handleTrimCommit = trimEndDate => {\r\n        const localTransAcc = transAcc\r\n        const trimDate = Moment(trimEndDate)\r\n        trim(localTransAcc, trimDate)\r\n        setTransAcc(localTransAcc)\r\n        localTransAcc.forEach(account => insertDataIntoGrid(account, gridApi[account.accountId]))\r\n        setSaveRequired(true)\r\n        setRecalcRequired(true)\r\n        setShowTrim(false)\r\n    }\r\n\r\n    const handleArchiveLoad = async () => {\r\n        const key = \"archive.json\"   // need to change this!\r\n        try {\r\n            const data = await Storage.get(key, { level: \"private\", download: true, cacheControl: 'no-cache' })\r\n            if (!data)\r\n                showAlert(\"Archive\", \"No archive found - without explicit exception\")\r\n            else if (!data.Body)\r\n                showAlert(\"Archive\", \"No data body found - without explicit exception\")\r\n            else {\r\n                const result = await data.Body.text()\r\n                const dataToRestore = JSON.parse(result)\r\n                let localTransAcc = []\r\n                if (!Array.isArray(dataToRestore[0])) {\r\n                    // console.log('Ultra New archive format')\r\n                    localTransAcc = dataToRestore\r\n                } else if ((dataToRestore).length === 4) {\r\n                    // console.log('Old archive format')\r\n                    localTransAcc = dataToRestore[2]\r\n                } else if ((dataToRestore).length === 2) {\r\n                    // console.log('New archive format')\r\n                    localTransAcc = dataToRestore[0]\r\n                } else showAlert(\"Archive\", \"Invalid archive format\")\r\n\r\n                setArchiveFile(key)\r\n                setTransAcc(localTransAcc)\r\n                localTransAcc.forEach(account => insertDataIntoGrid(account, gridApi[account.accountId]))\r\n                selectAccount(\"0\")\r\n                setSaveRequired(false)\r\n                setSaveArchiveRequired(false)\r\n                setRecalcRequired(false)\r\n                setArchive(true)\r\n            }\r\n        }\r\n        catch (e) {\r\n            if (e.response.status === 403)\r\n                showAlert(\"Archive\", \"No archive found\")\r\n            else\r\n                onError(e)\r\n        }\r\n    }\r\n\r\n    const saveArchive = async (key, strToSave) => {\r\n        try {\r\n            await Storage.put(key, strToSave, { level: \"private\", contentType: \"application/json\" })\r\n            setSaveRequired(false)\r\n            setSaveArchiveRequired(false)\r\n            showSavedAlert(\"Archive\")\r\n        }\r\n        catch (e) {\r\n            onError(e)\r\n        }\r\n    }\r\n\r\n    const handleArchiveCommit = async archiveEndDate => {\r\n        const endDate = Moment(archiveEndDate)\r\n        const archiveData = deleteFutureAllTransactions(accounts, transAcc, endDate, true)\r\n        const key = `Archive-${endDate.format(\"YYYY-MM-DD\")}.arc`  // needs changing!\r\n        // const key = 'archive.json'\r\n        const strToSave = JSON.stringify(archiveData)\r\n        await saveArchive(key, strToSave)\r\n        setShowArchive(false)\r\n    }\r\n\r\n    const handleArchiveSave = async () => {\r\n        const key = archiveFile\r\n        const strToSave = JSON.stringify(transAcc)\r\n        await saveArchive(key, strToSave)\r\n    }\r\n\r\n    const updateRow = node => {\r\n        const localTransAcc = transAcc\r\n        const acc = localTransAcc.find(account => account.accountId === currentAccId)\r\n        const data = node.data\r\n        if (Moment(data.date).isAfter(today)) data.reconciled = 0\r\n        const transToUpdate = acc.trans.find(transaction => transaction.transactionId === data.transactionId)\r\n        transToUpdate.description = data.description\r\n        transToUpdate.date = data.date\r\n        transToUpdate.sortKey = Moment(data.date).diff(beginning, 'days')\r\n        transToUpdate.reconciled = data.reconciled\r\n        transToUpdate.crAmount = data.crAmount\r\n        transToUpdate.dbAmount = data.dbAmount\r\n        setTransAcc(localTransAcc)\r\n        setRecalcRequired(true)\r\n        if (archive)\r\n            setSaveArchiveRequired(true)\r\n        else\r\n            setSaveRequired(true)\r\n        gridApi[currentAccId].refreshCells()\r\n    }\r\n\r\n    const selectAccount = eventKey => {\r\n        setCurrentAccId(eventKey)\r\n        let interestAcc = false\r\n        if (transAcc) {\r\n            const acc = transAcc.find(ta => ta.accountId === eventKey)\r\n            if (acc) interestAcc = acc.interest\r\n        }\r\n        setInterestAcc(interestAcc)\r\n    }\r\n\r\n    const showSavedAlert = title => showAlert(title, \"Saved Successfully\")\r\n\r\n    const showAlert = (title, body) => {\r\n        setConfirmSubmit(null)\r\n        setConfirmTitle(title)\r\n        setConfirmBody(body)\r\n        setShowCancelButton(false)\r\n        setShowConfirm(true)\r\n    }\r\n\r\n    const h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0) - 280\r\n    const divStyle = { boxSizing: \"border-box\", height: `${h}px` }\r\n    const descriptionWidth = Math.min(Math.max(Math.max(document.documentElement.clientWidth, window.innerWidth || 0) - 1266, 234), 624)\r\n    const isSummary = currentAccId === \"0\"\r\n\r\n    const debug = false\r\n\r\n    return (\r\n        <div className=\"Transactions\" >\r\n            <h1>Transactions {archive ? \"- ARCHIVE\" : \"\"}</h1>\r\n            <Confirm title={confirmTitle} \r\n                     body={confirmBody} \r\n                     show={showConfirm} \r\n                     onSubmit={confirmSubmit}\r\n                     showCancelButton={showCancelButton}\r\n                     setShow={setShowConfirm} />\r\n            {transAcc &&\r\n                <div>\r\n                    <InterestPopUp\r\n                        show={showInterest}\r\n                        onHide={() => setShowInterest(false)}\r\n                        onSubmit={handleInterestCommit}\r\n                    />\r\n                    <ArchivePopUp\r\n                        show={showArchive}\r\n                        type=\"Archive\"\r\n                        onHide={() => setShowArchive(false)}\r\n                        onSubmit={handleArchiveCommit}\r\n                    />\r\n                    <ArchivePopUp\r\n                        show={showTrim}\r\n                        type=\"Trim\"\r\n                        onHide={() => setShowTrim(false)}\r\n                        onSubmit={handleTrimCommit}\r\n                    />\r\n                    <Tabs\r\n                        defaultActiveKey={0}\r\n                        transition={false}\r\n                        id=\"trans-tab\"\r\n                        activeKey={currentAccId}\r\n                        onSelect={selectAccount}\r\n                    >\r\n                        <Tab key={0} eventKey={0} title=\"Summary\">\r\n                            <Summary />\r\n                        </Tab>\r\n                        {transAcc\r\n                            .filter(account => !account.hide)\r\n                            .sort((a, b) => (a.sortOrder - b.sortOrder))\r\n                            .map((ta) => (\r\n                                <Tab key={ta.accountId} eventKey={ta.accountId} title={ta.accName}>\r\n                                    <div\r\n                                        id=\"transGrid\"\r\n                                        style={divStyle}\r\n                                        className=\"ag-theme-bootstrap\"\r\n                                    >\r\n                                        <AgGridReact\r\n                                            defaultColDef={{\r\n                                                resizable: true\r\n                                            }}\r\n                                            headerHeight={30}\r\n                                            rowSelection=\"single\"\r\n                                            rowBuffer={30}\r\n                                            onCellEditingStopped={updateRow}\r\n                                            onCellClicked={onCellClicked}\r\n                                            rowDeselection={true}\r\n                                            immutableData={true}\r\n                                            getRowNodeId={data => data.transactionId}\r\n                                            getRowStyle={getRowStyle}\r\n                                            isRowSelectable={node => node.data.transactionId !== 0}\r\n                                            onGridReady={params => {\r\n                                                setGridApi({ ...gridApi, [ta.accountId]: params.api })\r\n                                                const currAcc = transAcc ? transAcc.find(y => y.accountId === ta.accountId) : null\r\n                                                insertDataIntoGrid(currAcc, params.api)\r\n                                            }}\r\n                                        >\r\n                                            <AgGridColumn headerName=\"\" field=\"reconciled\" width={22} cellStyle={reconciledCellStyle} valueFormatter={reconciledFormatter} ></AgGridColumn>\r\n                                            <AgGridColumn headerName=\"Date\" field=\"date\"  editable={rowEditable} width={110} filter=\"agDateColumnFilter\" filterParams={dateFilterOptions} cellStyle={{ 'textAlign': 'right' }} valueFormatter={dateFormatter}></AgGridColumn>\r\n                                            <AgGridColumn headerName=\"Description\" field=\"description\" width={descriptionWidth} editable={rowEditable} filter=\"agTextColumnFilter\" cellEditor=\"agTextCellEditor\"></AgGridColumn>\r\n                                            <AgGridColumn headerName=\"Debit\" field=\"dbAmount\" width={110} editable={rowEditable} type=\"numericColumn\" valueParser={amountParser} valueFormatter={amountFormatter} filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} cellEditor=\"agTextCellEditor\" cellEditorParams={{ useFormatter: true }}></AgGridColumn>\r\n                                            <AgGridColumn headerName=\"Credit\" field=\"crAmount\" width={110} editable={rowEditable} type=\"numericColumn\" valueParser={amountParser} valueFormatter={amountFormatter} filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} cellEditor=\"agTextCellEditor\" cellEditorParams={{ useFormatter: true }}></AgGridColumn>\r\n                                            <AgGridColumn headerName=\"Balance\" field=\"balance\" width={115} type=\"numericColumn\" valueFormatter={balanceFormatter} filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} cellStyle={balanceCellFormatter}></AgGridColumn>\r\n                                            <AgGridColumn headerName=\"cr\" field=\"crRate\" width={80} type=\"numericColumn\" filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} hide={!debug}></AgGridColumn>\r\n                                            <AgGridColumn headerName=\"db\" field=\"dbRate\" width={80} type=\"numericColumn\" filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} hide={!debug}></AgGridColumn>\r\n                                            <AgGridColumn headerName=\"period\" field=\"periodInterest\" width={110} type=\"numericColumn\" filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} hide={!debug}></AgGridColumn>\r\n                                            <AgGridColumn headerName=\"Line\" field=\"lineInterest\" width={110} type=\"numericColumn\" filter=\"agNumberColumnFilter\" filterParams={amountFilterOptions} hide={!debug}></AgGridColumn>\r\n                                        </AgGridReact>\r\n                                    </div>\r\n                                </Tab>\r\n                            ))\r\n                        }\r\n                    </Tabs>\r\n                    <Row>\r\n                        <Col>\r\n                            <ButtonToolbar id=\"buttons\" className=\"mb-2 float-right\">\r\n                                <ButtonGroup className=\"mr-2\">\r\n                                    <Button variant=\"outline-secondary\"\r\n                                        size=\"sm\"\r\n                                        onClick={handleArchiveLoad}>\r\n                                        Load Archive\r\n                                    </Button>\r\n                                    <Button variant={saveArchiveRequired ? \"outline-warning\" : \"outline-secondary\"}\r\n                                        size=\"sm\"\r\n                                        onClick={archive ? handleArchiveSave : () => setShowArchive(true)}\r\n                                        disabled={recalcRequired || saveRequired || isSummary}>\r\n                                        {archive ? \"Save\" : \"Archive\"}\r\n                                    </Button>\r\n                                    <Button variant=\"outline-secondary\"\r\n                                        size=\"sm\"\r\n                                        onClick={() => setShowTrim(true)}\r\n                                        disabled={recalcRequired || saveRequired || archive || isSummary}>\r\n                                        Trim\r\n                                    </Button>\r\n                                    <Button variant=\"outline-secondary\"\r\n                                        size=\"sm\"\r\n                                        onClick={() => setShowInterest(true)}\r\n                                        disabled={!interestAcc || archive}>\r\n                                        Interest\r\n                                    </Button>\r\n                                    <Button variant=\"outline-secondary\"\r\n                                        size=\"sm\"\r\n                                        onClick={handleAdd}\r\n                                        disabled={archive || isSummary}>\r\n                                        Add\r\n                                    </Button>\r\n                                    <Button variant=\"outline-secondary\"\r\n                                        size=\"sm\"\r\n                                        onClick={handleDuplicate}\r\n                                        disabled={archive || isSummary}>\r\n                                        Duplicate\r\n                                    </Button>\r\n                                    <Button variant=\"outline-secondary\"\r\n                                        size=\"sm\"\r\n                                        onClick={handleDelete}\r\n                                        disabled={archive || isSummary}>\r\n                                        Delete\r\n                                    </Button>\r\n                                    <Button variant=\"outline-secondary\"\r\n                                        size=\"sm\"\r\n                                        onClick={handleManual}\r\n                                        disabled={archive || isSummary}>\r\n                                        Manual\r\n                                    </Button>\r\n                                    <Button variant=\"outline-secondary\"\r\n                                        size=\"sm\"\r\n                                        onClick={handleLoad}>\r\n                                        Load\r\n                                    </Button>\r\n                                    <Button variant={saveRequired ? \"warning\" : \"outline-secondary\"}\r\n                                        size=\"sm\"\r\n                                        onClick={handleSave}\r\n                                        disabled={archive}>\r\n                                        Save\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                                <ButtonGroup>\r\n                                    <Button variant={recalcRequired ? \"warning\" : \"success\"}\r\n                                        size=\"sm\"\r\n                                        onClick={handleRecalculate}>\r\n                                        Recalculate\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </ButtonToolbar>\r\n                        </Col>\r\n                    </Row>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Transactions","C:\\Code\\lydia-client\\src\\components\\Summary.js",[],"C:\\Code\\lydia-client\\src\\components\\ArchivePopUp.js",[],"C:\\Code\\lydia-client\\src\\components\\InterestPopUp.js",[],"C:\\Code\\lydia-client\\src\\libs\\calculate.js",[],"C:\\Code\\lydia-client\\src\\containers\\ChangePassword.js",[],"C:\\Code\\lydia-client\\src\\containers\\ChangeEmail.js",[],"C:\\code\\lydia-client\\src\\containers\\ChangePassword.js",[],"C:\\code\\lydia-client\\src\\containers\\ChangeEmail.js",[],"C:\\code\\lydia-client\\src\\containers\\Accounts.js",[],"C:\\code\\lydia-client\\src\\containers\\Transactions.js",["259"],"C:\\code\\lydia-client\\src\\components\\Summary.js",[],"C:\\code\\lydia-client\\src\\components\\ArchivePopUp.js",[],"C:\\code\\lydia-client\\src\\components\\InterestPopUp.js",[],"C:\\code\\lydia-client\\src\\libs\\calculate.js",[],"C:\\Code\\lydia-client\\src\\components\\AppliedRoute.js",["260"],"C:\\Code\\lydia-client\\src\\libs\\contextLib.js",[],"C:\\Code\\lydia-client\\src\\libs\\errorLib.js",[],"C:\\Code\\lydia-client\\src\\containers\\Help.js",[],"C:\\Code\\lydia-client\\src\\components\\Contact.js",[],"C:\\Code\\lydia-client\\src\\libs\\hooksLib.js",[],"C:\\Code\\lydia-client\\src\\components\\ConfirmationCode.js",[],"C:\\Code\\lydia-client\\src\\components\\Confirm.js",[],{"ruleId":"261","severity":1,"message":"262","line":58,"column":6,"nodeType":"263","endLine":58,"endColumn":26,"suggestions":"264"},{"ruleId":"265","replacedBy":"266"},{"ruleId":"267","replacedBy":"268"},{"ruleId":"261","severity":1,"message":"262","line":57,"column":6,"nodeType":"263","endLine":57,"endColumn":26,"suggestions":"269"},{"ruleId":"261","severity":1,"message":"270","line":56,"column":8,"nodeType":"263","endLine":56,"endColumn":49,"suggestions":"271"},{"ruleId":"261","severity":1,"message":"272","line":53,"column":6,"nodeType":"263","endLine":53,"endColumn":47,"suggestions":"273"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1,"nodeType":"276","endLine":5,"endColumn":70},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'refreshAccounts' and 'refreshTemplates'. Either include them or remove the dependency array.","ArrayExpression",["277"],"no-native-reassign",["278"],"no-negated-in-lhs",["279"],["280"],"React Hook useEffect has a missing dependency: 'restoreData'. Either include it or remove the dependency array.",["281"],"React Hook useEffect has a missing dependency: 'handleLoad'. Either include it or remove the dependency array.",["282"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"283","fix":"284"},"no-global-assign","no-unsafe-negation",{"desc":"283","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},"Update the dependencies array to be: [refreshAccounts, refreshTemplates, stateToBeRefreshed]",{"range":"290","text":"291"},{"range":"292","text":"291"},"Update the dependencies array to be: [isAuthenticated, transAcc, currentAccId, restoreData]",{"range":"293","text":"294"},"Update the dependencies array to be: [isAuthenticated, transAcc, currentAccId, handleLoad]",{"range":"295","text":"296"},[2137,2157],"[refreshAccounts, refreshTemplates, stateToBeRefreshed]",[2114,2134],[2467,2508],"[isAuthenticated, transAcc, currentAccId, restoreData]",[1986,2027],"[isAuthenticated, transAcc, currentAccId, handleLoad]"]