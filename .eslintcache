[{"C:\\Code\\lydia-client\\src\\index.js":"1","C:\\Code\\lydia-client\\src\\registerServiceWorker.js":"2","C:\\Code\\lydia-client\\src\\App.js":"3","C:\\Code\\lydia-client\\src\\config.js":"4","C:\\Code\\lydia-client\\src\\Routes.js":"5","C:\\Code\\lydia-client\\src\\containers\\Home.js":"6","C:\\Code\\lydia-client\\src\\containers\\Signup.js":"7","C:\\Code\\lydia-client\\src\\containers\\Login.js":"8","C:\\Code\\lydia-client\\src\\containers\\NotFound.js":"9","C:\\Code\\lydia-client\\src\\containers\\Settings.js":"10","C:\\Code\\lydia-client\\src\\components\\AuthenticatedRoute.js":"11","C:\\Code\\lydia-client\\src\\components\\UnauthenticatedRoute.js":"12","C:\\Code\\lydia-client\\src\\components\\LoaderButton.js":"13","C:\\Code\\lydia-client\\src\\components\\BillingForm.js":"14","C:\\Code\\lydia-client\\src\\containers\\Account.js":"15","C:\\Code\\lydia-client\\src\\libs\\utilities.js":"16","C:\\Code\\lydia-client\\src\\containers\\ResetPassword.js":"17","C:\\Code\\lydia-client\\src\\containers\\Templates.js":"18","C:\\code\\lydia-client\\src\\index.js":"19","C:\\code\\lydia-client\\src\\App.js":"20","C:\\code\\lydia-client\\src\\registerServiceWorker.js":"21","C:\\code\\lydia-client\\src\\config.js":"22","C:\\code\\lydia-client\\src\\Routes.js":"23","C:\\code\\lydia-client\\src\\containers\\NotFound.js":"24","C:\\code\\lydia-client\\src\\containers\\Home.js":"25","C:\\code\\lydia-client\\src\\containers\\Login.js":"26","C:\\code\\lydia-client\\src\\containers\\Settings.js":"27","C:\\code\\lydia-client\\src\\containers\\Signup.js":"28","C:\\code\\lydia-client\\src\\containers\\Account.js":"29","C:\\code\\lydia-client\\src\\containers\\Templates.js":"30","C:\\code\\lydia-client\\src\\containers\\ResetPassword.js":"31","C:\\code\\lydia-client\\src\\components\\UnauthenticatedRoute.js":"32","C:\\code\\lydia-client\\src\\components\\AuthenticatedRoute.js":"33","C:\\code\\lydia-client\\src\\components\\LoaderButton.js":"34","C:\\code\\lydia-client\\src\\libs\\utilities.js":"35","C:\\code\\lydia-client\\src\\components\\BillingForm.js":"36","C:\\code\\lydia-client\\src\\containers\\Template.js":"37","C:\\Code\\lydia-client\\src\\containers\\Template.js":"38","C:\\Code\\lydia-client\\src\\containers\\Accounts.js":"39","C:\\Code\\lydia-client\\src\\containers\\Transactions.js":"40","C:\\Code\\lydia-client\\src\\components\\Summary.js":"41","C:\\Code\\lydia-client\\src\\components\\ArchivePopUp.js":"42","C:\\Code\\lydia-client\\src\\components\\InterestPopUp.js":"43","C:\\Code\\lydia-client\\src\\libs\\calculate.js":"44","C:\\Code\\lydia-client\\src\\containers\\ChangePassword.js":"45","C:\\Code\\lydia-client\\src\\containers\\ChangeEmail.js":"46","C:\\code\\lydia-client\\src\\containers\\ChangePassword.js":"47","C:\\code\\lydia-client\\src\\containers\\ChangeEmail.js":"48","C:\\code\\lydia-client\\src\\containers\\Accounts.js":"49","C:\\code\\lydia-client\\src\\containers\\Transactions.js":"50","C:\\code\\lydia-client\\src\\components\\Summary.js":"51","C:\\code\\lydia-client\\src\\components\\ArchivePopUp.js":"52","C:\\code\\lydia-client\\src\\components\\InterestPopUp.js":"53","C:\\code\\lydia-client\\src\\libs\\calculate.js":"54","C:\\Code\\lydia-client\\src\\components\\AppliedRoute.js":"55","C:\\Code\\lydia-client\\src\\libs\\contextLib.js":"56","C:\\Code\\lydia-client\\src\\libs\\errorLib.js":"57","C:\\Code\\lydia-client\\src\\containers\\Help.js":"58","C:\\Code\\lydia-client\\src\\components\\Contact.js":"59","C:\\Code\\lydia-client\\src\\libs\\hooksLib.js":"60","C:\\Code\\lydia-client\\src\\components\\ConfirmationCode.js":"61","C:\\Code\\lydia-client\\src\\components\\Confirm.js":"62"},{"size":1038,"mtime":1611645569419,"results":"63","hashOfConfig":"64"},{"size":4501,"mtime":1585326586609,"results":"65","hashOfConfig":"64"},{"size":6404,"mtime":1611645569397,"results":"66","hashOfConfig":"64"},{"size":1202,"mtime":1611645569405,"results":"67","hashOfConfig":"64"},{"size":2263,"mtime":1611645569397,"results":"68","hashOfConfig":"64"},{"size":6878,"mtime":1611646615921,"results":"69","hashOfConfig":"64"},{"size":3984,"mtime":1611645569415,"results":"70","hashOfConfig":"64"},{"size":5140,"mtime":1611645569412,"results":"71","hashOfConfig":"64"},{"size":192,"mtime":1611645569413,"results":"72","hashOfConfig":"64"},{"size":2182,"mtime":1611645569414,"results":"73","hashOfConfig":"64"},{"size":545,"mtime":1611645569398,"results":"74","hashOfConfig":"64"},{"size":890,"mtime":1611645569404,"results":"75","hashOfConfig":"64"},{"size":474,"mtime":1611645569403,"results":"76","hashOfConfig":"64"},{"size":2303,"mtime":1611645569399,"results":"77","hashOfConfig":"64"},{"size":15087,"mtime":1611645569406,"results":"78","hashOfConfig":"64"},{"size":1487,"mtime":1611645569423,"results":"79","hashOfConfig":"64"},{"size":5057,"mtime":1611645569413,"results":"80","hashOfConfig":"64"},{"size":7056,"mtime":1611645569417,"results":"81","hashOfConfig":"64"},{"size":1038,"mtime":1609724119811,"results":"82","hashOfConfig":"83"},{"size":5875,"mtime":1610612879326,"results":"84","hashOfConfig":"83"},{"size":4501,"mtime":1561692682965,"results":"85","hashOfConfig":"83"},{"size":1202,"mtime":1609724119779,"results":"86","hashOfConfig":"83"},{"size":2163,"mtime":1610334834326,"results":"87","hashOfConfig":"83"},{"size":192,"mtime":1609724119796,"results":"88","hashOfConfig":"83"},{"size":4436,"mtime":1609724119789,"results":"89","hashOfConfig":"83"},{"size":3406,"mtime":1610612841533,"results":"90","hashOfConfig":"83"},{"size":2140,"mtime":1609724119800,"results":"91","hashOfConfig":"83"},{"size":3286,"mtime":1610614092647,"results":"92","hashOfConfig":"83"},{"size":15081,"mtime":1610612233040,"results":"93","hashOfConfig":"83"},{"size":7050,"mtime":1610334834358,"results":"94","hashOfConfig":"83"},{"size":4133,"mtime":1610334834353,"results":"95","hashOfConfig":"83"},{"size":890,"mtime":1609724119778,"results":"96","hashOfConfig":"83"},{"size":545,"mtime":1609724119771,"results":"97","hashOfConfig":"83"},{"size":474,"mtime":1609724119777,"results":"98","hashOfConfig":"83"},{"size":1487,"mtime":1610612233064,"results":"99","hashOfConfig":"83"},{"size":2303,"mtime":1609724119773,"results":"100","hashOfConfig":"83"},{"size":16132,"mtime":1610612233051,"results":"101","hashOfConfig":"83"},{"size":16482,"mtime":1611645569416,"results":"102","hashOfConfig":"64"},{"size":8453,"mtime":1611645569407,"results":"103","hashOfConfig":"64"},{"size":31038,"mtime":1611645569418,"results":"104","hashOfConfig":"64"},{"size":2647,"mtime":1611645569404,"results":"105","hashOfConfig":"64"},{"size":2731,"mtime":1611645569398,"results":"106","hashOfConfig":"64"},{"size":3806,"mtime":1611645569402,"results":"107","hashOfConfig":"64"},{"size":31231,"mtime":1611645569421,"results":"108","hashOfConfig":"64"},{"size":2421,"mtime":1611645569408,"results":"109","hashOfConfig":"64"},{"size":2944,"mtime":1611645569408,"results":"110","hashOfConfig":"64"},{"size":2421,"mtime":1610334834348,"results":"111","hashOfConfig":"83"},{"size":2310,"mtime":1610614567680,"results":"112","hashOfConfig":"83"},{"size":8447,"mtime":1610612233045,"results":"113","hashOfConfig":"83"},{"size":25450,"mtime":1610612233054,"results":"114","hashOfConfig":"83"},{"size":2617,"mtime":1610334834334,"results":"115","hashOfConfig":"83"},{"size":2731,"mtime":1610334834327,"results":"116","hashOfConfig":"83"},{"size":3806,"mtime":1610612233038,"results":"117","hashOfConfig":"83"},{"size":31231,"mtime":1610612233061,"results":"118","hashOfConfig":"83"},{"size":206,"mtime":1585326586598,"results":"119","hashOfConfig":"64"},{"size":159,"mtime":1611645569421,"results":"120","hashOfConfig":"64"},{"size":203,"mtime":1611645569422,"results":"121","hashOfConfig":"64"},{"size":9572,"mtime":1611645569410,"results":"122","hashOfConfig":"64"},{"size":3632,"mtime":1611645569401,"results":"123","hashOfConfig":"64"},{"size":313,"mtime":1611645569423,"results":"124","hashOfConfig":"64"},{"size":1175,"mtime":1611645569400,"results":"125","hashOfConfig":"64"},{"size":1258,"mtime":1611645569399,"results":"126","hashOfConfig":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},"qqq7rg",{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"129"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},"gsccot",{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"129"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},"C:\\Code\\lydia-client\\src\\index.js",[],["255","256"],"C:\\Code\\lydia-client\\src\\registerServiceWorker.js",[],"C:\\Code\\lydia-client\\src\\App.js",["257"],"\r\nimport React, { useState, useEffect } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport Navbar from \"react-bootstrap/Navbar\"\r\nimport Nav from \"react-bootstrap/Nav\"\r\nimport Routes from \"./Routes\"\r\nimport { LinkContainer } from \"react-router-bootstrap\"\r\nimport { AppContext } from \"./libs/contextLib\"\r\nimport { onError } from \"./libs/errorLib\"\r\nimport { Auth } from \"aws-amplify\"\r\nimport { API } from \"aws-amplify\"\r\nimport \"./App.css\"\r\n\r\nconst App = () => {\r\n  const history = useHistory()\r\n  const [isAuthenticating, setIsAuthenticating] = useState(true)\r\n  const [isAuthenticated, userHasAuthenticated] = useState(false)\r\n  const [stateToBeRefreshed, setStateToBeRefreshed] = useState(false)\r\n  const [email, setEmail] = useState(\"\")\r\n  const [templates, setTemplates] = useState([])\r\n  const [accounts, setAccounts] = useState([])\r\n  const [transAcc, setTransAcc] = useState(null)\r\n  const [currentAccId, setCurrentAccId] = useState(\"0\")\r\n  const [templateFilterModel, setTemplateFilterModel] = useState(null)\r\n  const [templateColumnState, setTemplateColumnState] = useState(null)\r\n  const [saveArchiveRequired, setSaveArchiveRequired] = useState(false)\r\n  const [saveRequired, setSaveRequired] = useState(false)\r\n  const [recalcRequired, setRecalcRequired] = useState(false)\r\n  const [archive, setArchive] = useState(false)\r\n\r\n  useEffect(() => {\r\n    console.log('App: useEffect')\r\n    const onLoad = async () => {\r\n      setIsAuthenticating(true)\r\n      try {\r\n        let session = await Auth.currentSession()\r\n        userHasAuthenticated(true)\r\n        console.log('Session:')\r\n        console.log(session)\r\n        if (session) {\r\n          console.log('** > Before call to currentUserInfo')\r\n          const { attributes } = await Auth.currentUserInfo()\r\n          console.log('** > After call to currentUserInfo')\r\n          setEmail(attributes.email)\r\n        }\r\n        await refreshAccounts()\r\n        await refreshTemplates()\r\n      }\r\n      catch(e) {\r\n        if (e !== 'No current user') {\r\n          onError(e)\r\n        }\r\n      }\r\n    \r\n      setIsAuthenticating(false)\r\n    }\r\n    onLoad()\r\n  }, [stateToBeRefreshed])\r\n  \r\n\r\n\r\n  const getAccounts = () => API.get(\"accounts\", \"/accounts\")\r\n\r\n  const getTemplates = () => API.get(\"accounts\", \"/templates\")\r\n\r\n  const refreshTemplates = async () => {\r\n    const currentTemplates = await getTemplates()\r\n    setTemplates( currentTemplates )\r\n  }\r\n\r\n  const refreshAccounts = async () => {\r\n    const accountsFromGet = await getAccounts()\r\n    const mappedAccounts = accountsFromGet.map(acc => ({hide:false, ...acc}))\r\n    sortAndSetAccounts(mappedAccounts)\r\n  }\r\n\r\n  const sortAndSetAccounts = accs => {\r\n    accs.sort((a, b) => a.sortOrder - b.sortOrder)\r\n    setAccounts(accs)\r\n    const selectedAccount = accs.find(acc => !acc.hide)\r\n    if (selectedAccount) \r\n      setCurrentAccId(selectedAccount.accountId)\r\n    else \r\n      setCurrentAccId(\"0\")\r\n  }\r\n\r\n  const changeAccountsOrder = (fromIndex, toIndex, fromSortOrder, toSortOrder) => {\r\n    const localAccounts = accounts\r\n\r\n    localAccounts[fromIndex].sortOrder = toSortOrder\r\n    localAccounts[toIndex].sortOrder = fromSortOrder\r\n    setRecalcRequired(true)\r\n    sortAndSetAccounts(localAccounts)\r\n  }\r\n\r\n  const handleLogout = async () => {\r\n    userHasAuthenticated(false)\r\n    await Auth.signOut()\r\n\r\n    setTransAcc(null)\r\n    setEmail(\"\")\r\n    setTemplateFilterModel(null)\r\n    setTemplateColumnState(null)\r\n    setSaveArchiveRequired(false)\r\n    setSaveRequired(false)\r\n    setRecalcRequired(false)\r\n    setArchive(false)\r\n\r\n    history.push(\"/login\")\r\n  }\r\n\r\n  const saveAccount= account => API.put(\"accounts\", `/accounts/${account.accountId}`, {body: account})\r\n\r\n  const saveAccountSet = async (fromIndex, toIndex) => {\r\n    for (let i = fromIndex; i <= toIndex; i++)\r\n    {\r\n      await saveAccount(accounts[i])\r\n    }\r\n  }\r\n\r\n  return (\r\n    !isAuthenticating && (\r\n      <div className=\"App container py-3\">\r\n        <Navbar collapseOnSelect bg=\"light\" expand=\"md\" className=\"mb-3\">\r\n          <LinkContainer to=\"/\">\r\n            <Navbar.Brand className=\"font-weight-bold text-muted\">\r\n              Home\r\n            </Navbar.Brand>\r\n          </LinkContainer>\r\n          <Navbar.Toggle />\r\n          <Navbar.Collapse className=\"justify-content-end\">\r\n            <Nav activeKey={window.location.pathname}>\r\n              {isAuthenticated ? (\r\n                <>\r\n                  <LinkContainer to=\"/accounts\">\r\n                    <Nav.Link>Accounts</Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/transactions\">\r\n                    <Nav.Link>Transactions</Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/templates\">\r\n                    <Nav.Link>Templates</Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/help\">\r\n                    <Nav.Link>Help</Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/settings\">\r\n                    <Nav.Link>{email}</Nav.Link>\r\n                  </LinkContainer>\r\n                  <Nav.Link onClick={handleLogout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <LinkContainer to=\"/help\">\r\n                    <Nav.Link>Help</Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/signup\">\r\n                    <Nav.Link>Signup</Nav.Link>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/login\">\r\n                    <Nav.Link>Login</Nav.Link>\r\n                  </LinkContainer>\r\n                </>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n        <AppContext.Provider value={{ \r\n          isAuthenticated, userHasAuthenticated, accounts, templates, refreshTemplates, refreshAccounts, currentAccId, setCurrentAccId, \r\n          templateColumnState, setTemplateColumnState, templateFilterModel, setTemplateFilterModel, recalcRequired, setRecalcRequired,\r\n          setStateToBeRefreshed, changeAccountsOrder, saveAccountSet,\r\n          archive, setArchive, saveArchiveRequired, setSaveArchiveRequired, transAcc, setTransAcc, saveRequired, setSaveRequired, \r\n          email, setEmail\r\n        }}>\r\n          <Routes />\r\n        </AppContext.Provider>\r\n      </div>\r\n    )\r\n  )\r\n}\r\n\r\nexport default App","C:\\Code\\lydia-client\\src\\config.js",[],"C:\\Code\\lydia-client\\src\\Routes.js",[],"C:\\Code\\lydia-client\\src\\containers\\Home.js",[],"C:\\Code\\lydia-client\\src\\containers\\Signup.js",[],"C:\\Code\\lydia-client\\src\\containers\\Login.js",[],"C:\\Code\\lydia-client\\src\\containers\\NotFound.js",[],"C:\\Code\\lydia-client\\src\\containers\\Settings.js",[],"C:\\Code\\lydia-client\\src\\components\\AuthenticatedRoute.js",[],"C:\\Code\\lydia-client\\src\\components\\UnauthenticatedRoute.js",[],"C:\\Code\\lydia-client\\src\\components\\LoaderButton.js",[],"C:\\Code\\lydia-client\\src\\components\\BillingForm.js",[],"C:\\Code\\lydia-client\\src\\containers\\Account.js",[],"C:\\Code\\lydia-client\\src\\libs\\utilities.js",[],"C:\\Code\\lydia-client\\src\\containers\\ResetPassword.js",[],"C:\\Code\\lydia-client\\src\\containers\\Templates.js",[],"C:\\code\\lydia-client\\src\\index.js",[],["258","259"],"C:\\code\\lydia-client\\src\\App.js",["260"],"C:\\code\\lydia-client\\src\\registerServiceWorker.js",[],"C:\\code\\lydia-client\\src\\config.js",[],"C:\\code\\lydia-client\\src\\Routes.js",[],"C:\\code\\lydia-client\\src\\containers\\NotFound.js",[],"C:\\code\\lydia-client\\src\\containers\\Home.js",[],"C:\\code\\lydia-client\\src\\containers\\Login.js",[],"C:\\code\\lydia-client\\src\\containers\\Settings.js",[],"C:\\code\\lydia-client\\src\\containers\\Signup.js",[],"C:\\code\\lydia-client\\src\\containers\\Account.js",[],"C:\\code\\lydia-client\\src\\containers\\Templates.js",[],"C:\\code\\lydia-client\\src\\containers\\ResetPassword.js",[],"C:\\code\\lydia-client\\src\\components\\UnauthenticatedRoute.js",[],"C:\\code\\lydia-client\\src\\components\\AuthenticatedRoute.js",[],"C:\\code\\lydia-client\\src\\components\\LoaderButton.js",[],"C:\\code\\lydia-client\\src\\libs\\utilities.js",[],"C:\\code\\lydia-client\\src\\components\\BillingForm.js",[],"C:\\code\\lydia-client\\src\\containers\\Template.js",[],"C:\\Code\\lydia-client\\src\\containers\\Template.js",[],"C:\\Code\\lydia-client\\src\\containers\\Accounts.js",[],"C:\\Code\\lydia-client\\src\\containers\\Transactions.js",["261"],"import React, { Component } from \"react\"\r\nimport {PageHeader, Button, ButtonToolbar, ButtonGroup, Tabs, Tab} from \"react-bootstrap\"\r\nimport \"./Transactions.css\"\r\nimport Moment from \"moment\"\r\nimport { calculate, deleteFutureAllTransactions, trim, archiveRebalance } from \"../libs/calculate\"\r\nimport { Storage } from \"aws-amplify\";\r\nimport { AgGridReact } from \"ag-grid-react\"\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\"\r\nimport \"ag-grid-community/dist/styles/ag-theme-bootstrap.css\"\r\nimport { today, uuid, beginning } from \"../libs/utilities\"\r\nimport InterestPopUp from \"../components/InterestPopUp\"\r\nimport ArchivePopUp from \"../components/ArchivePopUp\"\r\nimport Summary from \"../components/Summary\"\r\n\r\nexport default class Transactions extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.gridApi = [];\r\n    this.debug = true\r\n    let descriptionWidth = Math.min(Math.max(Math.max(document.documentElement.clientWidth, window.innerWidth || 0) - 1266,234),654)\r\n    this.state = {\r\n      showInterest: false,\r\n      showArchive: false,\r\n      showTrim: false,\r\n      isLoading: true,\r\n      archiveFile: null,\r\n//      archiveDate: null,\r\n      defaultColDef : \r\n      {\r\n        resizable : true\r\n      },\r\n      columnDefs: [\r\n        {\r\n          headerName: \"\",\r\n          field: \"reconciled\",\r\n          width: 22,\r\n          cellStyle: {margin: \"0px\",\"padding\":\"0px\",textAlign: \"center\",\"font-style\":\"normal\" },\r\n          valueFormatter: this.reconciledFormatter,\r\n        },\r\n        {\r\n          headerName: \"Date\",\r\n          field: \"date\",\r\n          filter: \"agDateColumnFilter\",\r\n          filterParams: {\r\n            comparator: function(filterLocalDateAtMidnight, cellValue) {\r\n              let dateParts = cellValue.split(\"-\");\r\n              let day = Number(dateParts[2]);\r\n              let month = Number(dateParts[1]) - 1;\r\n              let year = Number(dateParts[0]);\r\n              let cellDate = new Date(year, month, day);\r\n              if (cellDate < filterLocalDateAtMidnight) {\r\n                return -1;\r\n              } else if (cellDate > filterLocalDateAtMidnight) {\r\n                return 1;\r\n              } else {\r\n                return 0;\r\n              }\r\n            }\r\n          },\r\n          width: 110,\r\n          valueFormatter: this.dateFormatter,\r\n          cellStyle: { textAlign: \"right\" },\r\n          editable: this.rowEditable,\r\n          cellEditor: \"agTextCellEditor\"\r\n        },\r\n        {\r\n          headerName: \"Description\",\r\n          field: \"description\",\r\n          editable: this.rowEditable,\r\n          width: descriptionWidth,\r\n          filter: \"agTextColumnFilter\",\r\n          cellEditor: \"agTextCellEditor\"\r\n        },\r\n        {\r\n          headerName: \"Debit\",\r\n          width: 110,\r\n          field: \"dbAmount\",\r\n          editable: this.rowEditable,\r\n          type: \"numericColumn\",\r\n          valueParser: this.amountParser,\r\n          valueFormatter: this.amountFormatter,\r\n          filter: \"agNumberColumnFilter\",\r\n          filterParams: this.amountFilterOptions,\r\n          cellEditorParams: { useFormatter: true },\r\n          cellEditor: \"agTextCellEditor\"\r\n\r\n        },\r\n        {\r\n          headerName: \"Credit\",\r\n          field: \"crAmount\",\r\n          type: \"numericColumn\",\r\n          width: 110,\r\n          editable: this.rowEditable,\r\n          valueParser: this.amountParser,\r\n          valueFormatter: this.amountFormatter,\r\n          filter: \"agNumberColumnFilter\",\r\n          filterParams: this.amountFilterOptions,\r\n          cellEditorParams: { useFormatter: true },\r\n          cellEditor: \"agTextCellEditor\"\r\n        },\r\n        {\r\n          headerName: \"Balance\",\r\n          field: \"balance\",\r\n          width: 115,\r\n          type: \"numericColumn\",\r\n          valueFormatter: this.balanceFormatter,\r\n          filter: \"agNumberColumnFilter\",\r\n          filterParams: this.amountFilterOptions,\r\n          cellStyle: params => {\r\n            if (params.value < 0) {\r\n              return { color: \"red\" };\r\n            } else {\r\n              return null;\r\n            }\r\n          }\r\n        },\r\n        {\r\n          headerName: \"cr\",\r\n          hide: !this.debug,\r\n          field: \"crRate\",\r\n          width: 80,\r\n          type: \"numericColumn\",\r\n          filter: \"agNumberColumnFilter\",\r\n          filterParams: this.amountFilterOptions       \r\n        },\r\n        {\r\n          headerName: \"db\",\r\n          hide: !this.debug,\r\n          field: \"dbRate\",\r\n          width: 80,\r\n          type: \"numericColumn\",\r\n          filter: \"agNumberColumnFilter\",\r\n          filterParams: this.amountFilterOptions\r\n        },\r\n        {\r\n          headerName: \"period\",\r\n          hide: !this.debug,\r\n          field: \"periodInterest\",\r\n          width: 110,\r\n          type: \"numericColumn\",\r\n          filter: \"agNumberColumnFilter\",\r\n          filterParams: this.amountFilterOptions       \r\n        },\r\n        {\r\n          headerName: \"Line\",\r\n          hide: !this.debug,\r\n          field: \"lineInterest\",\r\n          width: 110,\r\n          type: \"numericColumn\",\r\n          filter: \"agNumberColumnFilter\",\r\n          filterParams: this.amountFilterOptions       \r\n        }\r\n\r\n      ]\r\n    };\r\n  }\r\n\r\n  amountFilterOptions = { \r\n    filterOptions: [\r\n      {\r\n        displayKey: 'equals',\r\n        displayName: 'Equals',\r\n        test: function(filterValue, cellValue) {\r\n          let temp = parseInt(cellValue, 10) / 100;\r\n            return temp === filterValue;\r\n        }\r\n      },\r\n      {\r\n        displayKey: 'lessthan',\r\n        displayName: 'Less than',\r\n        test: function(filterValue, cellValue) {\r\n          let temp = parseInt(cellValue, 10) / 100;\r\n            return temp < filterValue;\r\n        }\r\n      },\r\n      {\r\n        displayKey: 'greaterthan',\r\n        displayName: 'Greater than',\r\n        test: function(filterValue, cellValue) {\r\n          let temp = parseInt(cellValue, 10) / 100;\r\n            return temp > filterValue;\r\n        }\r\n      }\r\n    ]\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (!this.props.isAuthenticated) {\r\n      return;\r\n    }\r\n    try {\r\n      let transAcc = this.props.transAcc;\r\n      if (!transAcc) this.handleLoad();\r\n      else\r\n      {\r\n        let currAccId = this.props.currentAccId;\r\n        console.log(`Transactions - componentDidMount - currAccId=${currAccId}`)\r\n        if (currAccId)\r\n        {\r\n          let acc = transAcc.find(x => x.accountId === currAccId)\r\n          if (acc)\r\n            this.setState({interestAcc: acc.interest});\r\n        }\r\n      }\r\n    } catch (e) {\r\n      alert(e);\r\n    }\r\n    this.setState({ isLoading: false });\r\n  }\r\n\r\n  onAmountChanged = params => {\r\n    if (isNaN(params.newValue))\r\n      this.gridApi[this.props.currentAccId].stopEditing(true);\r\n  };\r\n\r\n  amountParser = params => {\r\n    let val = Number(params.newValue);\r\n    if (isNaN(val)) return params.oldValue;\r\n    else return Math.round(val * 100);\r\n  };\r\n\r\n  amountFormatter = params => {\r\n    let val = parseInt(params.value, 10) / 100;\r\n    if (val) return val.toFixed(2);\r\n    return \"\";\r\n  };\r\n\r\n  reconciledFormatter = params => {\r\n    let unicode = \"0020\"\r\n    if (params.value === 1) unicode = \"2713\" \r\n    if (params.value === 2) unicode = \"2705\" \r\n    return String.fromCharCode(parseInt(unicode,16))\r\n  }\r\n\r\n  balanceFormatter = params => (parseInt(params.value, 10) / 100).toFixed(2)\r\n\r\n  dateFormatter = params => Moment(params.value).format(\"Do MMM YY\")\r\n\r\n  getRowStyle = params => {\r\n    let rowStyle = {}\r\n    if (Moment(params.node.data.date).startOf(\"date\").isSameOrBefore(today, \"day\")) rowStyle = { \"background-color\" : \"#D3D3D3\"}\r\n    if (params.node.rowIndex === 0) rowStyle[\"font-weight\"] = \"bold\"\r\n    if (!params.node.data.autogen) rowStyle[\"font-style\"] = \"italic\"\r\n    if (params.node.data.newRate) rowStyle[\"color\"] = \"#0000FF\"\r\n    return rowStyle\r\n  }\r\n\r\n  rowEditable = node => node.data.transactionId !== 0 && ((Moment(node.data.date).isSameOrBefore(today, \"day\")) || (!node.data.autogen)) &&  (!node.data.newRate)\r\n \r\n  onCellClicked = (node) => {\r\n    if (node.column.colId === \"reconciled\" && node.rowIndex > 0)\r\n      if (Moment(node.data.date).isSameOrBefore(today, \"day\")){\r\n        let transAcc = this.props.transAcc;\r\n        let acc = transAcc.find(x => x.accountId === this.props.currentAccId);\r\n        let data = node.data;\r\n        let trans = acc.trans.find(x => x.transactionId === data.transactionId);\r\n        if (isNaN(trans.reconciled) || trans.reconciled === null ) trans.reconciled = 0\r\n        trans.reconciled++;\r\n        if (trans.reconciled === 3) trans.reconciled = 0\r\n        node.data.reconciled = trans.reconciled\r\n        this.props.setTransactions(transAcc);\r\n        if (this.props.archive) this.props.setSaveArchiveRequired(true)\r\n        else this.props.setSaveRequired(true)\r\n        this.gridApi[this.props.currentAccId].refreshCells()\r\n      }\r\n  }\r\n\r\n  handleRecalculate = () => {\r\n    let transAcc\r\n    if (this.props.archive) {\r\n      transAcc = archiveRebalance(\r\n        this.props.transAcc,\r\n        today\r\n      )\r\n      this.props.setSaveArchiveRequired(true)\r\n    }\r\n    else {\r\n      transAcc = calculate(\r\n        this.props.accounts,\r\n        this.props.templates,\r\n        this.props.transAcc,\r\n        today\r\n      )\r\n       this.props.setSaveRequired(true)\r\n    }\r\n    this.props.setTransactions(transAcc)\r\n    transAcc.forEach(account => this.insertDataIntoGrid(account,this.gridApi[account.accountId]))\r\n    this.props.setRecalcRequired(false)\r\n  }\r\n\r\n  handleSave = () => {\r\n    let transAcc = deleteFutureAllTransactions(this.props.accounts, this.props.transAcc,today, false)\r\n    let key = \"data2.txt\";\r\n    let dataToSave = [this.props.accounts,this.props.templates,transAcc,today.format()]\r\n    let strToSave = JSON.stringify(dataToSave)\r\n    Storage.put(key, strToSave, {\r\n      level: \"private\",\r\n      contentType: \"application/json\"\r\n    })\r\n      .then(result => {this.props.setSaveRequired(false);\r\n      alert(\"Transactions saved successfully\")})\r\n      .catch(err => alert(err));\r\n  }\r\n\r\n  handleLoad = () => {\r\n    let key = \"data2.txt\";\r\n//   let key = \"Archive-2019-05-20.arc\"\r\n    let transAcc = [];\r\n    Storage.get(key, { level: \"private\", download: true })\r\n      .then(result => {\r\n        let res = new TextDecoder(\"utf-8\").decode(result.Body);\r\n        let dataToRestore = JSON.parse(res)\r\n        // Reconstruct data as of when it was saved including using the templates that existed then as well\r\n        // as the date at that time\r\n        transAcc = calculate(...dataToRestore)\r\n        // Now recalculate the data based on today's date and templates\r\n        transAcc = calculate(\r\n          this.props.accounts,\r\n          this.props.templates,\r\n          transAcc,\r\n          today\r\n        )\r\n        let currentAccId = this.props.currentAccId\r\n        this.selectAccount(currentAccId);\r\n        this.props.setTransactions(transAcc);\r\n        transAcc.forEach(account => this.insertDataIntoGrid(account,this.gridApi[account.accountId]))\r\n        this.props.setSaveRequired(false)\r\n        this.props.setSaveArchiveRequired(false)\r\n        this.props.setRecalcRequired(false);\r\n        this.props.setArchive(false)\r\n      })\r\n      .catch(err => {\r\n        if (err.statusCode === 403) {\r\n          transAcc = calculate(\r\n            this.props.accounts,\r\n            this.props.templates,\r\n            transAcc,\r\n            today\r\n          );\r\n          let currentAccId = this.props.currentAccId\r\n          this.selectAccount(currentAccId);\r\n          this.props.setTransactions(transAcc);\r\n          transAcc.forEach(account => this.insertDataIntoGrid(account,this.gridApi[account.accountId]))\r\n          this.props.setSaveRequired(false)\r\n          this.props.setSaveArchiveRequired(false)          \r\n          this.props.setRecalcRequired(false);\r\n          this.props.setArchive(false)\r\n        } else console.log(err);\r\n      });\r\n  }\r\n\r\n  insertDataIntoGrid = (account,api) => {\r\n    let data =[]\r\n    if (account) {\r\n      let desc = \"Opening Balance\"\r\n      if (account.interest)\r\n        desc = `Int=${(account.starting.interest / 100).toFixed(2)} db=${account.starting.dbRate} cr=${account.starting.crRate}`\r\n      data = [\r\n        {\r\n          transactionId: 0,\r\n          date: account.starting.date,\r\n          description: desc,\r\n          balance: account.starting.balance\r\n        },\r\n        ...account.trans\r\n      ]\r\n    }\r\n    if (api) {\r\n      api.setRowData(data)\r\n      api.refreshCells()\r\n    }\r\n  }\r\n  \r\n  insertDataIntoCurrentGrid = (transAcc) => {\r\n    const acc = transAcc.find(x => x.accountId === this.props.currentAccId)\r\n    this.insertDataIntoGrid(acc,this.gridApi[acc.accountId])\r\n  }\r\n\r\n  handleDuplicate = () => {\r\n    const nodes = this.gridApi[this.props.currentAccId].getSelectedNodes();\r\n    if (nodes.length) {\r\n      const data = nodes[0].data\r\n      const newDate = Moment(data.date)\r\n\r\n      let newNode = {\r\n        date: newDate.format(\"YYYY-MM-DD\"),\r\n        sortKey: newDate.diff(beginning,'days'),\r\n        autogen: null,\r\n        type: \"manual\",\r\n        transactionId: uuid(),\r\n        dbAmount: data.dbAmount,\r\n        crAmount: data.crAmount,\r\n        crRate: data.crRate,\r\n        dbRate: data.dbRate,\r\n        periodInterest: data.periodInterest,\r\n        lineInterest: data.lineInterest,\r\n        description: data.description\r\n      }\r\n      let transAcc = this.props.transAcc\r\n      let acc = transAcc.find(x => x.accountId === this.props.currentAccId)\r\n      acc.trans.push(newNode)\r\n      transAcc = calculate(\r\n        this.props.accounts,\r\n        this.props.templates,\r\n        transAcc,\r\n        today\r\n      )\r\n      this.props.setTransactions(transAcc)\r\n      this.insertDataIntoCurrentGrid(transAcc)\r\n      this.props.setSaveRequired(true)\r\n      this.props.setRecalcRequired(false)\r\n      }\r\n  }\r\n  \r\n  handleDelete = () => {\r\n    let nodes = this.gridApi[this.props.currentAccId].getSelectedNodes();\r\n    if (nodes.length) {\r\n      let transAcc = this.props.transAcc;\r\n      let acc = transAcc.find(x => x.accountId === this.props.currentAccId);\r\n      let data = nodes[0].data;\r\n      acc.trans = acc.trans.filter(x => x.transactionId !== data.transactionId);\r\n      nodes[0].setData(data);\r\n\r\n      transAcc = calculate(\r\n        this.props.accounts,\r\n        this.props.templates,\r\n        transAcc,\r\n        today\r\n      )\r\n      this.props.setTransactions(transAcc)\r\n      this.insertDataIntoCurrentGrid(transAcc)\r\n      this.props.setSaveRequired(true)\r\n      this.props.setRecalcRequired(false)\r\n    }\r\n  };\r\n\r\n  handleManual = () => {\r\n    let nodes = this.gridApi[this.props.currentAccId].getSelectedNodes();\r\n    if (nodes.length) {\r\n      let transAcc = this.props.transAcc;\r\n      let acc = transAcc.find(x => x.accountId === this.props.currentAccId);\r\n      let data = nodes[0].data;\r\n      let transToUpdate = acc.trans.find(\r\n        x => x.transactionId === data.transactionId\r\n      );\r\n      data.autogen = null;\r\n      transToUpdate.autogen = null;\r\n      transToUpdate.type = \"manual\"\r\n      nodes[0].setData(data);\r\n      this.props.setTransactions(transAcc);\r\n      this.props.setRecalcRequired(true);\r\n      this.props.setSaveRequired(true);\r\n      let params = { rowNodes: nodes };\r\n      this.gridApi[this.props.currentAccId].refreshCells(params);\r\n    }\r\n  }\r\n\r\n  handleAdd = () => {\r\n    const newNode = {\r\n      date: today.format(\"YYYY-MM-DD\"),\r\n      sortKey: today.diff(beginning,'days'),\r\n      autogen: null,\r\n      type: \"manual\",\r\n      transactionId: uuid(),\r\n      dbAmount: 0,\r\n      crAmount: 0,\r\n      description: \"New Item\"\r\n    }\r\n    let transAcc = this.props.transAcc\r\n    const acc = transAcc.find(x => x.accountId === this.props.currentAccId);\r\n    acc.trans.push(newNode)\r\n    transAcc = calculate(\r\n      this.props.accounts,\r\n      this.props.templates,\r\n      transAcc,\r\n      today\r\n    )\r\n    this.props.setTransactions(transAcc)\r\n    this.insertDataIntoCurrentGrid(transAcc)\r\n    this.props.setSaveRequired(true)\r\n    this.props.setRecalcRequired(false)\r\n  }\r\n\r\n  handleInterestCommit = (newRateValue, newRateCredit, intFirstAppliedDate) => {\r\n    const newRate = parseFloat(newRateValue).toFixed(2)\r\n    let desc\r\n    if (newRateCredit) desc = \" New credit rate: \" + newRate + \"%\"\r\n    else desc = \" New debit rate: \" + newRate + \"%\"\r\n    const newDate = Moment(intFirstAppliedDate)\r\n    const newNode = {\r\n      date: newDate.format(\"YYYY-MM-DD\"),\r\n      sortKey: newDate.diff(beginning,'days'),\r\n      autogen: null,\r\n      type: \"manual\",\r\n      transactionId: uuid(),\r\n      newRate: newRate / 100,\r\n      credit: newRateCredit,\r\n      description: desc,\r\n      dbAmount: 0,\r\n      crAmount: 0\r\n    }\r\n    let transAcc = this.props.transAcc\r\n    const acc = transAcc.find(x => x.accountId === this.props.currentAccId)\r\n    acc.trans.push(newNode)\r\n    transAcc = calculate(\r\n      this.props.accounts,\r\n      this.props.templates,\r\n      transAcc,\r\n      today\r\n    )\r\n    this.props.setTransactions(transAcc)\r\n    this.insertDataIntoCurrentGrid(transAcc)\r\n    this.props.setSaveRequired(true)\r\n    this.props.setRecalcRequired(false)\r\n    this.setState( {showInterest: false})\r\n  }\r\n\r\n  handleTrimCommit = (trimEndDate) => {\r\n    const transAcc = this.props.transAcc\r\n    const trimDate = Moment(trimEndDate)\r\n    trim(transAcc, trimDate)\r\n    this.props.setTransactions(transAcc)\r\n    transAcc.forEach(account => this.insertDataIntoGrid(account,this.gridApi[account.accountId]))\r\n    this.props.setSaveRequired(true)\r\n    this.props.setRecalcRequired(true)\r\n    this.setState( {showTrim: false})\r\n  }\r\n\r\n  handleArchiveLoad = () => {\r\n    const key = \"archive.json\"\r\n    let transAcc = []\r\n\r\n    Storage.get(key, { level: \"private\", download: true })\r\n      .then(result => {\r\n        const res = new TextDecoder(\"utf-8\").decode(result.Body)\r\n        const dataToRestore = JSON.parse(res)\r\n//        transAcc = deleteFutureAllTransactions(dataToRestore[0],dataToRestore[2],dataToRestore[3])\r\n        console.log(dataToRestore)\r\n        if (!Array.isArray(dataToRestore[0])) {\r\n          console.log('Ultra New archive format')\r\n          transAcc = dataToRestore\r\n        } else if ((dataToRestore).length === 4) {\r\n          console.log('Old archive format')\r\n          transAcc = dataToRestore[2]\r\n//          this.setState( {archiveDate: dataToRestore[3]})\r\n        } else if ((dataToRestore).length === 2) {\r\n          console.log('New archive format')\r\n          transAcc = dataToRestore[0]\r\n//          this.setState( {archiveDate: dataToRestore[1]})\r\n        } else console.log('Invalid archive format!')\r\n\r\n        this.setState( {archiveFile: key})\r\n        // let currentAccId = 0\r\n        // if (transAcc.length > 0) currentAccId = transAcc[0].accountId\r\n        let currentAccId = this.props.currentAccId\r\n        this.props.setTransactions(transAcc)\r\n        transAcc.forEach(account => this.insertDataIntoGrid(account,this.gridApi[account.accountId]))\r\n        this.selectAccount(currentAccId)\r\n        this.props.setSaveRequired(false)\r\n        this.props.setSaveArchiveRequired(false)\r\n        this.props.setRecalcRequired(false)\r\n        this.props.setArchive(true)\r\n      })\r\n      .catch(err => {\r\n        if (err.statusCode === 403) alert(\"No archive found\")\r\n        else console.log(err)\r\n      })\r\n  }\r\n\r\n  handleArchiveCommit = (archiveEndDate) => {\r\n    const endDate = Moment(archiveEndDate)\r\n    const archive = deleteFutureAllTransactions(this.props.accounts, this.props.transAcc,endDate,true)\r\n    //let key = `Archive-${endDate.format(\"YYYY-MM-DD\")}.arc`\r\n    const key = 'archive.json'\r\n    // this.setState( {archiveDate: endDate.format(\"YYYY-MM-DD\")});\r\n    //const dataToSave = [this.props.accounts,[],archive,endDate.format()]\r\n    // const dataToSave = [archive,endDate.format(\"YYYY-MM-DD\")]\r\n    // const strToSave = JSON.stringify(dataToSave)\r\n    const strToSave = JSON.stringify(archive)\r\n    Storage.put(key, strToSave, {\r\n      level: \"private\",\r\n      contentType: \"application/json\"\r\n    })\r\n      .then(result => {\r\n        this.props.setSaveRequired(false)\r\n        this.props.setSaveArchiveRequired(false)\r\n        alert(\"Archive saved successfully\")\r\n    })\r\n      .catch(err => alert(err));\r\n    this.setState( {showArchive: false})\r\n  }\r\n\r\n  handleArchiveSave = () => {\r\n    //const endDate = Moment(this.props.archiveDate)\r\n    const key = this.state.archiveFile\r\n    //const dataToSave = [this.props.transAcc,endDate.format(\"YYYY-MM-DD\")]\r\n    //const strToSave = JSON.stringify(dataToSave)\r\n    const strToSave = JSON.stringify(this.props.transAcc)\r\n    Storage.put(key, strToSave, {\r\n      level: \"private\",\r\n      contentType: \"application/json\"\r\n    })\r\n      .then(result => {\r\n        this.props.setSaveRequired(false)\r\n        this.props.setSaveArchiveRequired(false)\r\n        alert(\"Archive saved successfully\")\r\n    })\r\n      .catch(err => alert(err))\r\n  }\r\n\r\n  handleInterestShow = () => {\r\n    this.setState( {showInterest: true})\r\n  }\r\n\r\n  handleInterestClose = () => {\r\n    this.setState( {showInterest: false})\r\n  }\r\n\r\n  handleArchiveShow = () => {\r\n    this.setState( {showArchive: true})\r\n  }\r\n\r\n  handleArchiveClose = () => {\r\n    this.setState( {showArchive: false})\r\n  }\r\n\r\n  handleTrimShow = () => {\r\n    this.setState( {showTrim: true})\r\n  }\r\n\r\n  handleTrimClose = () => {\r\n    this.setState( {showTrim: false})\r\n  }\r\n\r\n  updateRow = node => {\r\n    const transAcc = this.props.transAcc\r\n    const acc = transAcc.find(account => account.accountId === this.props.currentAccId)\r\n    const data = node.data\r\n    if (Moment(data.date).isAfter(today)) data.reconciled = 0\r\n    const transToUpdate = acc.trans.find(transaction => transaction.transactionId === data.transactionId)\r\n    transToUpdate.description = data.description\r\n    transToUpdate.date = data.date\r\n    transToUpdate.sortKey = Moment(data.date).diff(beginning,'days')\r\n    transToUpdate.reconciled = data.reconciled\r\n    transToUpdate.crAmount = data.crAmount\r\n    transToUpdate.dbAmount = data.dbAmount\r\n    this.props.setTransactions(transAcc)\r\n    this.props.setRecalcRequired(true)\r\n    if (this.props.archive)\r\n      this.props.setSaveArchiveRequired(true)\r\n    else\r\n      this.props.setSaveRequired(true)\r\n    this.gridApi[this.props.currentAccId].refreshCells()\r\n  }\r\n\r\n  selectAccount = eventKey => {\r\n    this.props.setCurrentAccId(eventKey)\r\n    let interestAcc = false\r\n    let transAcc = this.props.transAcc\r\n    if (transAcc) {\r\n      let acc = transAcc.find(x => x.accountId === eventKey)\r\n      if (acc) interestAcc = acc.interest\r\n    }\r\n    this.setState({interestAcc})\r\n  }\r\n\r\n  render() {\r\n    let h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0) - 280;\r\n    let divStyle = { boxSizing: \"border-box\", height: `${h}px` };\r\n    return (\r\n//      <div className=\"transactions\" class=\"ag-theme-alpine-dark\">\r\n      <div className=\"ag-theme-alpine-dark\">\r\n        <PageHeader>Transactions {this.props.archive?\"- ARCHIVE\":\"\"}</PageHeader>\r\n        <InterestPopUp\r\n          showInterest={this.state.showInterest}\r\n          onClose={this.handleInterestClose}\r\n          onSubmit={this.handleInterestCommit}\r\n          transAcc={this.props.transAcc}\r\n          currentAccId={this.props.currentAccId}\r\n        />\r\n        <ArchivePopUp\r\n          showArchive={this.state.showArchive}\r\n          type=\"Archive\"\r\n          onClose={this.handleArchiveClose}\r\n          onSubmit={this.handleArchiveCommit}\r\n          transAcc={this.props.transAcc}\r\n          currentAccId={this.props.currentAccId}\r\n        />\r\n        <ArchivePopUp\r\n          showArchive={this.state.showTrim}\r\n          type=\"Trim\"\r\n          onClose={this.handleTrimClose}\r\n          onSubmit={this.handleTrimCommit}\r\n          transAcc={this.props.transAcc}\r\n          currentAccId={this.props.currentAccId}\r\n        />        \r\n        <Tabs\r\n          defaultActiveKey={1}\r\n          animation={false}\r\n          activeKey={this.props.currentAccId}\r\n          onSelect={this.selectAccount}\r\n          id=\"trans-tab\"\r\n        >\r\n          <Tab key={0} eventKey={0} title=\"Summary\">\r\n            <Summary \r\n              transAcc={this.props.transAcc}\r\n            />\r\n          </Tab>\r\n          {this.props.transAcc ? this.props.transAcc.filter(account => !account.hide).sort((a,b) => (a.sortOrder - b.sortOrder)).map((x, index) => (\r\n            <Tab key={x.accountId} eventKey={x.accountId} title={x.accName}>\r\n              <div\r\n                id=\"transGrid\"\r\n                style={divStyle}\r\n                className=\"ag-theme-bootstrap\"\r\n              >\r\n                <AgGridReact\r\n                  headerHeight={30}\r\n                  columnDefs={this.state.columnDefs}\r\n                  defaultColDef={this.state.defaultColDef}\r\n                  rowSelection=\"single\"\r\n                  rowBuffer={30}\r\n                  onCellEditingStopped={this.updateRow}\r\n                  onCellClicked={this.onCellClicked}\r\n                  rowDeselection={true}\r\n                  immutableData={true}\r\n                  components={this.state.components}\r\n                  getRowNodeId={data => data.transactionId}\r\n                  getRowStyle={this.getRowStyle}\r\n                  isRowSelectable={node => node.data.transactionId !== 0}\r\n                  onGridReady={params => {\r\n                    this.gridApi[x.accountId] = params.api\r\n                    let currAcc;\r\n                    if (this.props.transAcc)\r\n                      currAcc = this.props.transAcc.find(y => y.accountId === x.accountId)\r\n                    this.insertDataIntoGrid(currAcc,params.api)\r\n                  }}\r\n                />\r\n              </div>\r\n            </Tab>\r\n            )) : <div id=\"transGrid\" style={divStyle} className=\"ag-theme-bootstrap\"></div> \r\n          }\r\n        </Tabs>\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-12\">\r\n            <ButtonToolbar id=\"buttons\" className=\"pull-right\">\r\n              <ButtonGroup>\r\n                <Button onClick={this.handleArchiveLoad}>Load Archive</Button>\r\n                <Button disabled={this.props.recalcRequired || this.props.saveRequired} \r\n                onClick={this.props.archive ? this.handleArchiveSave : this.handleArchiveShow}\r\n                bsStyle={this.props.saveArchiveRequired ? \"warning\" : \"default\"}\r\n                >{this.props.archive ? \"Save\" : \"Archive\"}</Button>\r\n                <Button disabled={this.props.recalcRequired || this.props.saveRequired || this.props.archive} onClick={this.handleTrimShow}>Trim</Button>\r\n                <Button disabled={!this.state.interestAcc || this.props.archive} onClick={this.handleInterestShow}>Interest</Button>\r\n                <Button onClick={this.handleAdd} disabled={this.props.archive}>Add</Button>\r\n                <Button onClick={this.handleDuplicate} disabled={this.props.archive}>Duplicate</Button>\r\n                <Button onClick={this.handleDelete} disabled={this.props.archive}>Delete</Button>\r\n                <Button onClick={this.handleManual} disabled={this.props.archive}>Manual</Button>\r\n                <Button onClick={this.handleLoad}>Load</Button>\r\n                <Button\r\n                  bsStyle={this.props.saveRequired ? \"warning\" : \"default\"}\r\n                  disabled={this.props.archive}\r\n                  onClick={this.handleSave}\r\n                >\r\n                  Save\r\n                </Button>\r\n              </ButtonGroup>\r\n              <Button\r\n//                disabled={this.props.archive}\r\n                bsStyle={this.props.recalcRequired ? \"warning\" : \"success\"}\r\n                onClick={this.handleRecalculate}\r\n              >\r\n                Recalculate\r\n              </Button>\r\n            </ButtonToolbar>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","C:\\Code\\lydia-client\\src\\components\\Summary.js",[],"C:\\Code\\lydia-client\\src\\components\\ArchivePopUp.js",[],"C:\\Code\\lydia-client\\src\\components\\InterestPopUp.js",[],"C:\\Code\\lydia-client\\src\\libs\\calculate.js",[],"C:\\Code\\lydia-client\\src\\containers\\ChangePassword.js",[],"C:\\Code\\lydia-client\\src\\containers\\ChangeEmail.js",[],"C:\\code\\lydia-client\\src\\containers\\ChangePassword.js",[],"C:\\code\\lydia-client\\src\\containers\\ChangeEmail.js",[],"C:\\code\\lydia-client\\src\\containers\\Accounts.js",[],"C:\\code\\lydia-client\\src\\containers\\Transactions.js",["262"],"C:\\code\\lydia-client\\src\\components\\Summary.js",[],"C:\\code\\lydia-client\\src\\components\\ArchivePopUp.js",[],"C:\\code\\lydia-client\\src\\components\\InterestPopUp.js",[],"C:\\code\\lydia-client\\src\\libs\\calculate.js",[],"C:\\Code\\lydia-client\\src\\components\\AppliedRoute.js",["263"],"C:\\Code\\lydia-client\\src\\libs\\contextLib.js",[],"C:\\Code\\lydia-client\\src\\libs\\errorLib.js",[],"C:\\Code\\lydia-client\\src\\containers\\Help.js",[],"C:\\Code\\lydia-client\\src\\components\\Contact.js",[],"C:\\Code\\lydia-client\\src\\libs\\hooksLib.js",[],"C:\\Code\\lydia-client\\src\\components\\ConfirmationCode.js",[],"C:\\Code\\lydia-client\\src\\components\\Confirm.js",[],{"ruleId":"264","replacedBy":"265"},{"ruleId":"266","replacedBy":"267"},{"ruleId":"268","severity":1,"message":"269","line":58,"column":6,"nodeType":"270","endLine":58,"endColumn":26,"suggestions":"271"},{"ruleId":"264","replacedBy":"272"},{"ruleId":"266","replacedBy":"273"},{"ruleId":"268","severity":1,"message":"269","line":57,"column":6,"nodeType":"270","endLine":57,"endColumn":26,"suggestions":"274"},{"ruleId":"268","severity":1,"message":"275","line":56,"column":8,"nodeType":"270","endLine":56,"endColumn":49,"suggestions":"276"},{"ruleId":"268","severity":1,"message":"277","line":53,"column":6,"nodeType":"270","endLine":53,"endColumn":47,"suggestions":"278"},{"ruleId":"279","severity":1,"message":"280","line":4,"column":1,"nodeType":"281","endLine":5,"endColumn":70},"no-native-reassign",["282"],"no-negated-in-lhs",["283"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'refreshAccounts' and 'refreshTemplates'. Either include them or remove the dependency array.","ArrayExpression",["284"],["282"],["283"],["285"],"React Hook useEffect has a missing dependency: 'restoreData'. Either include it or remove the dependency array.",["286"],"React Hook useEffect has a missing dependency: 'handleLoad'. Either include it or remove the dependency array.",["287"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"288","fix":"289"},{"desc":"288","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},"Update the dependencies array to be: [refreshAccounts, refreshTemplates, stateToBeRefreshed]",{"range":"295","text":"296"},{"range":"297","text":"296"},"Update the dependencies array to be: [isAuthenticated, transAcc, currentAccId, restoreData]",{"range":"298","text":"299"},"Update the dependencies array to be: [isAuthenticated, transAcc, currentAccId, handleLoad]",{"range":"300","text":"301"},[2137,2157],"[refreshAccounts, refreshTemplates, stateToBeRefreshed]",[2114,2134],[2467,2508],"[isAuthenticated, transAcc, currentAccId, restoreData]",[1986,2027],"[isAuthenticated, transAcc, currentAccId, handleLoad]"]